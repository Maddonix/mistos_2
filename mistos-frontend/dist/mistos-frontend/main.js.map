{"version":3,"sources":["./src/app/importer/importer.component.ts","./src/app/importer/importer.component.html","./src/app/experiments/experiments-list/experiments-list.component.ts","./src/app/experiments/experiments-list/experiments-list.component.html","./src/app/shared/image.service.ts","./src/app/dialogs/edit-name/edit-name.component.ts","./src/app/dialogs/edit-name/edit-name.component.html","./src/app/images/images.resolver.ts","./src/app/dialogs/edit-hint/edit-hint.component.ts","./src/app/dialogs/edit-hint/edit-hint.component.html","./src/app/classifiers/classifiers.component.ts","./src/app/classifiers/classifiers.component.html","./src/app/classifiers/classifiers-list/classifiers-list.component.ts","./src/app/classifiers/classifiers-list/classifiers-list.component.html","./src/app/images/image-detail/image-detail.component.ts","./src/app/images/image-detail/image-detail.component.html","./src/app/options/options.component.ts","./src/app/options/options.component.html","./src/app/images/image-start/image-start.component.ts","./src/app/images/image-start/image-start.component.html","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/shared/experiment.service.ts","./src/app/classifiers/classifier-start/classifier-start.component.ts","./src/app/classifiers/classifier-start/classifier-start.component.html","./src/app/deepflash/deepflash.component.ts","./src/app/deepflash/deepflash.component.html","./src/app/images/images-list/images-list.component.ts","./src/app/images/images-list/images-list.component.html","./src/app/experiments/experiment-start/experiment-start.component.ts","./src/app/experiments/experiment-start/experiment-start.component.html","./src/app/shared/classifier.service.ts","./src/app/app-navbar/app-navbar.component.ts","./src/app/app-navbar/app-navbar.component.html","./src/app/models/classifier.model.ts","./src/app/classifiers/classifier-detail/classifier-detail.component.ts","./src/app/classifiers/classifier-detail/classifier-detail.component.html","./src/app/dialogs/warning-delete/warning-delete.component.ts","./src/app/dialogs/warning-delete/warning-delete.component.html","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/dialogs/add-image-to-group/add-image-to-group.component.ts","./src/app/dialogs/add-image-to-group/add-image-to-group.component.html","./src/app/models/experiment.model.ts","./src/app/models/image.model.ts","./src/app/dialogs/edit-channels/edit-channels.component.ts","./src/app/dialogs/edit-channels/edit-channels.component.html","./src/app/experiments/experiment-detail/experiment-detail.component.ts","./src/app/experiments/experiment-detail/experiment-detail.component.html","./src/app/classifiers/classifier.resolver.ts","./src/app/app.module.ts","./src/app/images/images.component.ts","./src/app/images/images.component.html","./src/app/experiments/experiment-hint/experiment-hint.component.ts","./src/app/experiments/experiment-hint/experiment-hint.component.html","./src/app/importer/mistos-formats/mistos-formats.component.ts","./src/app/importer/mistos-formats/mistos-formats.component.html","./src/app/deepflash/ground-truth-estimator/ground-truth-estimator.component.ts","./src/app/deepflash/ground-truth-estimator/ground-truth-estimator.component.html","./src/app/images/image-hint/image-hint.component.ts","./src/app/images/image-hint/image-hint.component.html","./src/app/experiments/experiments.resolver.ts","./src/app/classifiers/classifier-hint/classifier-hint.component.ts","./src/app/classifiers/classifier-hint/classifier-hint.component.html","./src/app/experiments/experiments.component.ts","./src/app/experiments/experiments.component.html","./src/app/importer/deepflash-models/deepflash-models.component.ts","./src/app/importer/deepflash-models/deepflash-models.component.html","./src/app/app-routing.module.ts","./src/app/dialogs/experiment-create-new-dialog/experiment-create-new-dialog.component.ts","./src/app/dialogs/experiment-create-new-dialog/experiment-create-new-dialog.component.html","./src/app/dialogs/edit-description/edit-description.component.ts","./src/app/dialogs/edit-description/edit-description.component.html","./src/app/dialogs/export-experiment/export-experiment.component.ts","./src/app/dialogs/export-experiment/export-experiment.component.html","./src/app/importer/images-upload/images-upload.component.ts","./src/app/importer/images-upload/images-upload.component.html","./src/app/shared/com.service.ts","./src/main.ts","./src/app/deepflash/predict/predict.component.ts","./src/app/deepflash/predict/predict.component.html","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;AAS3C,MAAM,iBAAiB;IAmB5B,YACU,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAnBhC,UAAK,GAAG,UAAU,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QACpB,oBAAe,GAAW,EAAE,CAAC;QAC7B,YAAO,GAAG,EAAE,CAAC;QACb,mBAAc,GAAG,EAAE,CAAC;QACpB,qBAAgB,GAAQ,EAAE,CAAC;QAC3B,yBAAoB,GAAQ,EAAE,CAAC;QAI/B,gBAAW,GAAG;YACZ,OAAO;YACP,kBAAkB;YAClB,UAAU;SACX,CAAC;QACF,eAAU,GAAQ,OAAO,CAAC;IAKpB,CAAC;IAEP,QAAQ;IACR,CAAC;IAAA,CAAC;IAGF,sBAAsB,CAAC,KAAK;IAC5B,CAAC;IAAA,CAAC;IAEJ,YAAY;IACV,qBAAqB,CAAC,GAAG,EAAE,IAAI;QAC7B,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,SAAS,CACnD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,cAAc,GAAG,OAAO,GAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtE,CAAC,EACD,CAAC,GAAG,EAAE,EAAE,GAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAC,CAC7B;IACH,CAAC;IAED,8BAA8B;QAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAAA,CAAC;IAEF,qBAAqB,CAAC,KAAK;QACvB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;SACpD;IACL,CAAC;IAAA,CAAC;IAEF,sBAAsB,CAAC,KAAK;QACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAAA,CAAC;;kFA7DS,iBAAiB;iGAAjB,iBAAiB;QCV9B,mFACE;QACA,6EACE;QAAA,+EAAuC;QACzC,4DAAU;QAEV,6EACE;QAAA,kFAA6C;QAC/C,4DAAU;QACV,6EACE;QAAA,gFAAyC;QAC3C,4DAAU;QAEZ,4DAAgB;;6FDHH,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACN;AACX;AACV;AACY;AAEX;AAEuF;AAC5E;;;;;;;;;;;;;;;;;;ICFrD,sFACI;IAAA,qFACA;IAAA,4EACA;IADqD,8WAA8B;IAAnF,4DACA;IAAA,4DAAiB;IACrB,4DAAkB;;;IAJD,4EAAmB;IAEzB,0DAAmB;IAAnB,4EAAmB;;;IAG9B,2EAAiC;IAAA,uDAAW;IAAA,4DAAW;;;IAAtB,0DAAW;IAAX,4EAAW;;;;IAK5C,sFACI;IAAA,qFACA;IAAA,4EACA;IADmC,+WAA+B;IAAlE,4DACA;IAAA,4DAAiB;IACrB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAAY;IAAA,4DAAW;;;IAAvB,0DAAY;IAAZ,6EAAY;;;;IAK5C,sFACI;IAAA,qFACA;IAAA,4EACA;IADmC,gXAA+B;IAAlE,4DACA;IAAA,4DAAiB;IACrB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAA0B;IAAA,4DAAW;;;IAArC,0DAA0B;IAA1B,2FAA0B;;;IAK1D,kFAAoC;IAAA,oEAAQ;IAAA,4DAAkB;;;;IAC9D,+EACI;IAAA,6EAAoE;IAA5B,8WAA2B;IAAC,iEAAM;IAAA,4DAAS;IACnF,6EAAsE;IAA5B,8WAA2B;IAAC,iEAAM;IAAA,4DAAS;IACzF,4DAAW;;;IAIX,4EAAqE;;;IAErE,qEAAoE;;;AD7BrE,MAAM,wBAAwB;IAanC,YACU,UAAsB,EACtB,MAAc,EACd,KAAqB,EACtB,MAAiB;QAHhB,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACtB,WAAM,GAAN,MAAM,CAAW;QAN1B,qBAAgB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IAOlD,CAAC;IAEL,QAAQ;QACN,4BAA4B;QAC5B,gHAAgH;QAChH,0CAA0C;QAC1C,MAAM;QACN,oEAAoE;QACpE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,2BAA2B;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,0EAAU,EAAE,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,+DAAc,CAAC,QAAQ,CAAC;QAC1C,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC;IAED,qBAAqB;QACnB,8BAA8B;QAC9B,IAAI,YAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;QACzC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QACtF,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QACrF,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACpF,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;QAEvF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,sJAAkC,EAClC,YAAY,CACb,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,aAAwB,EAAC,EAAE;YAC5D,IAAI,aAAa,YAAY,0EAAU,EAAE;gBACvC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACxE,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;wBAC/D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;wBACrC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACxB;QAEH,CAAC,CACF,CAAC;IACF,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,eAAe;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,QAAQ,CAAC,YAAoB;QAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACzE,CAAC;IAED,QAAQ,CAAC,GAAG;QACV,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAC,UAAU,EAAC,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACjE,CAAC;;gGAlFU,wBAAwB;wGAAxB,wBAAwB;kEACxB,8DAAO;kEACP,wEAAY;;;;;;QCrBzB,4EAAuG;QAAlC,gJAAS,2BAAuB,IAAC;QAAC,yEAAc;QAAA,4DAAS;QAC9H,yEACI;QACA,+EAGI;QACA,2EACA;QAAA,4IAIkB;QAClB,8HAAuD;QACvD,qEAAe;QAGf,2EACA;QAAA,4IAIkB;QAClB,8HAAuD;QACvD,qEAAe;QAGf,4EACA;QAAA,8IAIkB;QAClB,gIAAqE;QACrE,qEAAe;QAGf,6EACA;QAAA,+IAA8D;QAC9D,iIAGW;QACX,qEAAe;QAGf,6IAAqE;QAErE,+HAAoE;QACxE,4DAAY;QACZ,gFAA0F;QAC9F,4DAAM;;QAhDuC,0DAAyB;QAAzB,sFAAyB;QA2C7C,2DAAiC;QAAjC,iGAAiC;QAEpB,0DAA0B;QAA1B,kGAA0B;QAE7C,0DAAqC;QAArC,kJAAqC;;6FD/B3C,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;+UAEqB,IAAI;kBAAvB,uDAAS;mBAAC,8DAAO;YACO,SAAS;kBAAjC,uDAAS;mBAAC,wEAAY;;;;;;;;;;;;;;AErBzB;AAAA;AAAA;AAAA;AAA2C;AACZ;;AAIxB,MAAM,YAAY;IAMrB;QALA,qBAAgB,GAAG,IAAI,4CAAO,EAAW,CAAC;QAC1C,gBAAW,GAAG,IAAI,4CAAO,EAAS,CAAC;QAE3B,cAAS,GAAY,EAAE,CAAC;IAEjB,CAAC;IAEhB,iBAAiB,CAAC,KAAW;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,YAAY;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED,QAAQ,CAAC,KAAY;QACjB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,YAAY,CAAC,SAAkB;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;IACvD,CAAC;;wEAvBQ,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBADD,MAAM;6FACjB,YAAY;cADxB,wDAAU;eAAC,EAAC,UAAU,EAAC,MAAM,EAAC;;;;;;;;;;;;;;ACJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACU;AACK;;;;;;;AAOlE,MAAM,iBAAiB;IAK5B,YACU,SAA0C,EAClB,IAAS,CAAC,gDAAgD;;QADlF,cAAS,GAAT,SAAS,CAAiC;QAClB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvB,CAAC;IAEF,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,MAAM,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACxD,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;kFAzBU,iBAAiB,0MAOlB,wEAAe;iGAPd,iBAAiB;QCT9B,wEAAqB;QAAA,oEAAS;QAAA,4DAAK;QAEnC,qFACI;QAAA,0EACI;QACA,yEACI;QAAA,iFACI;QAAA,+EAAsB;QAAA,+DAAI;QAAA,4DAAY;QACtC,yEACJ;QAAA,4DAAiB;QACrB,4DAAM;QACV,4DAAO;QACX,4DAAqB;QAGrB,sFACI;QAAA,6EAA+D;QAArB,0IAAS,cAAU,IAAC;QAAC,gEAAI;QAAA,4DAAS;QAC5E,6EAA6D;QAApB,0IAAS,aAAS,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAfX,0DAAkB;QAAlB,+EAAkB;;6FDMf,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;sBAQI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEf3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;AASpC,MAAM,iBAAiB;IAI1B,YACY,YAAyB,EACzB,UAAqB;QADrB,iBAAY,GAAZ,YAAY,CAAa;QACzB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;IACvC,CAAC;;kFAXI,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB;6FAAjB,iBAAiB;cAD7B,wDAAU;;AAgBJ,MAAM,aAAa;IAKtB,YACY,YAAyB,EACzB,UAAqB;QADrB,iBAAY,GAAZ,YAAY,CAAa;QACzB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,IAAI,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9C,CAAC;;0EAbI,aAAa;gGAAb,aAAa,WAAb,aAAa;6FAAb,aAAa;cADzB,wDAAU;;;;;;;;;;;;;;ACxBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACU;AACK;;;;;;;;AAOlE,MAAM,iBAAiB;IAK5B,YACU,SAA0C,EAClB,IAAS,CAAC,gDAAgD;;QADlF,cAAS,GAAT,SAAS,CAAiC;QAClB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvB,CAAC;IAEF,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,MAAM,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACxD,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;kFAzBU,iBAAiB,0MAOlB,wEAAe;iGAPd,iBAAiB;QCT9B,wEAAqB;QAAA,oEAAS;QAAA,4DAAK;QAEnC,qFACI;QAAA,0EACI;QACA,yEACI;QAAA,oFACI;QAAA,+EAAsB;QAAA,+DAAI;QAAA,4DAAY;QACtC,4EAGmC;QACvC,4DAAiB;QACrB,4DAAM;QACV,4DAAO;QACX,4DAAqB;QAGrB,sFACI;QAAA,6EAA+D;QAArB,0IAAS,cAAU,IAAC;QAAC,gEAAI;QAAA,4DAAS;QAC5E,6EAA6D;QAApB,0IAAS,aAAS,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAlBX,0DAAkB;QAAlB,+EAAkB;;6FDMf,iBAAiB;cAL7B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;sBAQI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEhB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;AAO3C,MAAM,oBAAoB;IAE/B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;wFALU,oBAAoB;oGAApB,oBAAoB;QCPjC,yEAA0B;QAAA,qEAAU;QAAA,4DAAM;QAC1C,mFACI;QAAA,mFACI;QAAA,yEACI;QAAA,kFAA6C;QACjD,4DAAM;QACV,4DAAgB;QAChB,gFACI;QAAA,yEACI;QAAA,2EAA+B;QACnC,4DAAM;QACV,4DAAgB;QACpB,4DAAgB;;QAVG,0DAAe;QAAf,wEAAe;;6FDKrB,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACN;AACX;AACV;AACY;AAEX;AAE+C;AACpC;;;;;;;;;;;;;;;;;ICJjD,sFACI;IAAA,qFACE;IAAA,4EACF;IADmC,8WAA8B;IAA/D,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJH,4EAAmB;IAEG,0DAA8B;IAA9B,4FAA8B;;;IAGnE,2EAAgC;IAAA,uDAAW;IAAA,4DAAW;;;IAAtB,0DAAW;IAAX,4EAAW;;;;IAK7C,sFACE;IAAA,qFACE;IAAA,4EACF;IADqC,+WAA+B;IAAlE,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EACE;IAAA,2EAA2B;IAAA,uDAAY;IAAA,4DAAO;IAChD,4DAAW;;;IADkB,0DAAY;IAAZ,6EAAY;;;;IAMzC,sFACE;IAAA,qFACE;IAAA,4EACF;IADqC,+WAA+B;IAAlE,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAFqB,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAAe;IAAA,4DAAW;;;IAA1B,0DAAe;IAAf,gFAAe;;;;IAK/C,sFACE;IAAA,qFACE;IAAA,4EACF;IADqC,gXAA+B;IAAlE,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAA0B;IAAA,4DAAW;;;IAArC,0DAA0B;IAA1B,2FAA0B;;;IAK1D,kFAAoC;IAAA,oEAAQ;IAAA,4DAAkB;;;;IAC9D,2EACE;IAAA,6EAA8F;IAA5B,8WAA2B;IAAC,iEAAM;IAAA,4DAAS;IAC7G,6EAAmE;IAA5B,8WAA2B;IAAC,iEAAM;IAAA,4DAAS;IACpF,4DAAW;;;IAInB,4EAAqE;;;IAErE,qEAAoE;;;ADvCjE,MAAM,wBAAwB;IAYnC,YACU,MAAc,EACd,KAAqB,EACrB,MAAiB,EACjB,UAAqB;QAHrB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAW;QACjB,eAAU,GAAV,UAAU,CAAW;QAP/B,qBAAgB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QACjE,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;IAOjC,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACzC,0BAA0B;YAChC,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;YAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;YAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;YACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;QAC5F,CAAC,CAAC,CAAC;QAEH,2BAA2B;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,0EAAU,EAAE,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,+DAAc,CAAC,QAAQ,CAAC;QAC1C,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC;IAED,eAAe;QACb,wDAAwD;QACxD,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,QAAQ,CAAC,YAAoB;QAC3B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACzE,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,QAAQ,CAAC,YAAmB;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,YAAY,EAAE,iBAAiB;SAChC,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,8GAAsB,EACtB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAe,EAAC,EAAE;YACnD,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACxE,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;oBACxC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAEtB,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAAC,CAAC,SAAsB,EAAE,EAAE;wBACzE,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;wBAChC,IAAI,CAAC,WAAW,EAAE,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;aACF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;aAChD;QACH,CAAC,CACA;IACH,CAAC;;gGA9EU,wBAAwB;wGAAxB,wBAAwB;kEACxB,8DAAO;kEACP,wEAAY;;;;;;QCpBzB,yEACI;QAAA,+EAEI;QACA,2EACI;QAAA,4IAIoB;QAClB,8HAAsD;QAC5D,qEAAe;QAGf,2EACI;QAAA,4IAIkB;QAClB,8HAEW;QACf,qEAAe;QAGf,2EACI;QAAA,4IAIkB;QAClB,gIAA0D;QAC9D,qEAAe;QAGf,4EACI;QAAA,+IAIkB;QAClB,gIAAqE;QACzE,qEAAe;QAGf,6EACI;QAAA,+IAA8D;QAC9D,gIAGW;QACf,qEAAe;QAGnB,6IAAqE;QAErE,+HAAoE;QAEpE,4DAAY;QACZ,gFAA0F;QAC9F,4DAAM;;QA5DiE,0DAAyB;QAAzB,sFAAyB;QAsD3E,2DAAiC;QAAjC,iGAAiC;QAEpB,0DAA0B;QAA1B,kGAA0B;QAGzC,0DAAqC;QAArC,kJAAqC;;6FD1C3C,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;+UAEqB,IAAI;kBAAvB,uDAAS;mBAAC,8DAAO;YACO,SAAS;kBAAjC,uDAAS;mBAAC,wEAAY;;;;;;;;;;;;;;AEpBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACoB;AAEwB;AACZ;AACA;;;;;;;;;;;;;IC6BlE,0EACI;IAAA,uDACJ;IAAA,4DAAM;;;;IADF,0DACJ;IADI,yJACJ;;;;IA2BR,gFACI;IAAA,0FACI;IAAA,uDACA;IAAA,6EAAoG;IAAjC,iXAAgC;IAAC,iEAAM;IAAA,4DAAS;IACnH,6EAAkG;IAAnC,mXAAkC;IAAC,iEAAM;IAAA,4DAAS;IACrH,4DAAuB;IACvB,yEACI;IAAA,0EACI;IAAA,iEACA;IAAA,8EAAuH;IAAjC,kXAAgC;IAAC,gEAAI;IAAA,4DAAS;IACxI,4DAAM;IACN,2EACI;IAAA,wDACJ;IAAA,4DAAM;IACN,iEACA;IAAA,iEACA;IAEJ,4DAAM;IACV,4DAAgB;;;IAjBR,0DACA;IADA,yFACA;IASI,2DACJ;IADI,yFACJ;;AD5DT,MAAM,oBAAoB;IAQ/B,YACU,YAA0B,EAC1B,KAAqB,EACrB,MAAc,EACd,UAAsB,EACtB,MAAiB;QAJjB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAW;QAV3B,8BAA8B;QAC9B,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;IAUjC,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEpC,sBAAsB;QACtB,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,IAAW,EAAC,EAAE;YAC/E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;QAC5F,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC;SAChD,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,OAAO;QACxB,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,KAAK,OAAO,CAAC,CAAC;IAC1E,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,UAAU,CAAC,SAAS,CACvB,IAAI,CAAC,KAAK,CAAC,GAAG,EACd,IAAI,EAAE,IAAI,CACX;IACH,CAAC;IAED,cAAc;QACZ,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,2GAAqB,EACrB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,WAAc,EAAC,EAAE;YAClD,IAAI,OAAO,WAAW,KAAK,OAAO,EAAE,EAAE;gBACpC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,GAAE;oBACnG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACtC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;aACtD;QACH,CAAC,CACF,CAAC;IACF,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC;SAChD,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBAC5E,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;aAC7C;QACH,CAAC,CACA;IACH,CAAC;IAED,eAAe,CAAC,KAAsB;QACpC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACvE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;aAC9C;QACH,CAAC,CACA;IACH,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE;IAC/D,CAAC;IAED,aAAa,CAAC,OAAc;QAC1B,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC9D,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;gBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,KAAsB;QACpC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACvE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;aACvC;QACH,CAAC,CACA;IACH,CAAC;;wFAtJU,oBAAoB;oGAApB,oBAAoB;QChBjC,yEACI;QAAA,yEAA0B;QAAA,uDAAgD;QAAA,4DAAM;QAEpF,4DAAM;QAIN,yEACI;QAAA,mFACI;QACA,mFACI;QAAA,2EACI;QAAA,oEACJ;QAAA,4DAAW;QACX,uFACQ;QAAA,0EACR;QAAA,4DAAuB;QACvB,wFACI;QAAA,6EAAqE;QAA3B,6IAAS,oBAAgB,IAAC;QAAC,0EAAc;QAAA,4DAAS;QAChG,4DAAuB;QAC3B,4DAAgB;QAEhB,oFACI;QAAA,wFACI;QAAA,sEACJ;QAAA,4DAAuB;QACvB,0EACI;QACA,0EACI;QAAA,sEACA;QAAA,8EACI;QAD4D,6IAAS,oBAAgB,IAAC;QACtF,4EAAU;QAAA,gEAAI;QAAA,4DAAW;QAC7B,4DAAS;QACb,4DAAM;QACN,mHAEM;QACN,iEACA;QACA,0EACI;QAAA,kEACA;QAAA,8EACI;QADwD,6IAAS,gBAAY,IAAC;QAC9E,4EAAU;QAAA,gEAAI;QAAA,4DAAW;QAC7B,4DAAS;QACb,4DAAM;QACN,2EAAwB;QAAA,wDAAc;QAAA,4DAAM;QAChD,4DAAM;QACV,4DAAgB;QAQpB,4DAAgB;QACpB,4DAAM;QAGN,iEACA;QAAA,2EAAuB;QAAA,iFAAqB;QAAA,4DAAM;QAClD,0EACI;QAAA,oFACI;QAAA,wIAmBgB;QACpB,4DAAgB;QACpB,4DAAM;;QAnFwB,0DAAgD;QAAhD,gIAAgD;QASvD,0DAAe;QAAf,wEAAe;QAEF,0DAAsB;QAAtB,+IAAsB;QAUnC,0DAAe;QAAf,wEAAe;QAYsB,0DAAmC;QAAnC,yGAAmC;QAWvD,0DAAc;QAAd,+EAAc;QAkBb,0DAA4B;QAA5B,gGAA4B;;6FD/CxD,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;;;;;;;;;;;;;AEfD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,gBAAgB;IAE3B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;gFALU,gBAAgB;gGAAhB,gBAAgB;QCP7B,oEAAG;QAAA,yEAAc;QAAA,4DAAI;;6FDOR,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,mBAAmB;IAE9B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;sFALU,mBAAmB;mGAAnB,mBAAmB;QCPhC,yEAA8C;QAAA,0EAAe;QAAA,4DAAM;;6FDOtD,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAkD;;AAO3C,MAAM,aAAa;IAExB,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;0EALU,aAAa;6FAAb,aAAa;QCP1B,oEAAG;QAAA,sEAAW;QAAA,4DAAI;;6FDOL,aAAa;cALzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEND;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAA2C;AACZ;;AAIxB,MAAM,iBAAiB;IAM1B;QALA,0BAAqB,GAAG,IAAI,4CAAO,EAAgB,CAAC;QACpD,qBAAgB,GAAG,IAAI,4CAAO,EAAc,CAAC;QAErC,mBAAc,GAAiB,EAAE,CAAC;IAE3B,CAAC;IAEhB,sBAAsB,CAAC,UAAqB;QACxC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED,aAAa,CAAC,KAAY;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,iBAAiB,CAAC,cAA4B;QAC1C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;IACjE,CAAC;;kFAvBQ,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBADN,MAAM;6FACjB,iBAAiB;cAD7B,wDAAU;eAAC,EAAC,UAAU,EAAC,MAAM,EAAC;;;;;;;;;;;;;;ACJ/B;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,wBAAwB;IAEnC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;gGALU,wBAAwB;wGAAxB,wBAAwB;QCPrC,yEAA8C;QAAA,6EAAkB;QAAA,4DAAM;;6FDOzD,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;AAO3C,MAAM,kBAAkB;IAE7B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;oFALU,kBAAkB;kGAAlB,kBAAkB;QCP/B,yEACI;QAAA,yEACJ;QAAA,4DAAM;QACN,mFACI;QAAA,6EAAyB;QAAA,yEAA2B;QAAA,4DAAU;QAC9D,6EAAyC;QAAA,wFAAyD;QAAA,4DAAU;QAChH,4DAAgB;;6FDCH,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACN;AACX;AACV;AACY;AAEX;AAE+C;AAC9C;;;;;;;;;;;;;;;;;;;ICJ7C,sFACE;IAAA,qFACE;IAAA,4EACF;IADuD,yWAA8B;IAAnF,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJD,4EAAmB;IAEzB,0DAAmB;IAAnB,4EAAmB;;;IAG9B,2EAAgC;IAAA,uDAAW;IAAA,4DAAW;;;IAAtB,0DAAW;IAAX,4EAAW;;;;IAK3C,sFACE;IAAA,qFACE;IAAA,4EACF;IADqC,0WAA+B;IAAlE,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAAY;IAAA,4DAAW;;;IAAvB,0DAAY;IAAZ,6EAAY;;;IAI5C,kFAAmC;IAAA,6EAAkB;IAAA,4DAAkB;;;IACvE,2EAAgC;IAAA,uDAAmB;IAAA,4DAAW;;;IAA9B,0DAAmB;IAAnB,oFAAmB;;;;IAKnD,sFACE;IAAA,mFAA2E;IAAtC,wXAAqC;IAAC,uEAAY;IAAA,4DAAe;IACxG,4DAAkB;;;IADqB,0DAAqC;IAArC,mGAAqC;;;IAE5E,2EAAgC;IAAA,uDAAkB;IAAA,4DAAW;;;IAA7B,0DAAkB;IAAlB,mFAAkB;;;;IAKlD,sFACE;IAAA,qFACE;IAAA,4EACF;IADqC,2WAA+B;IAAlE,4DACF;IAAA,4DAAiB;IACnB,4DAAkB;;;IAJD,8EAAqB;IAEC,0DAA+B;IAA/B,6FAA+B;;;IAGtE,2EAAgC;IAAA,uDAA0B;IAAA,4DAAW;;;IAArC,0DAA0B;IAA1B,2FAA0B;;;IAK1D,kFAAoC;IAAA,oEAAQ;IAAA,4DAAkB;;;;IAC9D,+EACE;IAAA,6EAAoE;IAA1B,uWAAyB;IAAC,+DAAI;IAAA,4DAAS;IACjF,6EAAoE;IAA5B,yWAA2B;IAAC,iEAAM;IAAA,4DAAS;IACnF,6EAAmE;IAA5B,yWAA2B;IAAC,iEAAM;IAAA,4DAAS;IACpF,4DAAW;;;IAIb,4EAAqE;;;IAErE,qEAAoE;;;ADzCjE,MAAM,mBAAmB;IAY9B,YACU,UAAsB,EACtB,KAAqB,EACrB,MAAc,EACd,MAAiB;QAHjB,eAAU,GAAV,UAAU,CAAY;QACtB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAW;QAP3B,qBAAgB,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;QACtD,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;IASrC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,2BAA2B;QAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,gEAAK,EAAE,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,+DAAc,CAAC,QAAQ,CAAC;QAC1C,6BAA6B;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEzD,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;IAC9F,CAAC;IAED,eAAe;QACb,wDAAwD;QACxD,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,QAAQ,CAAC,OAAe;QACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IACpE,CAAC;IAED,QAAQ,CAAC,OAAe;QACtB,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,YAAY,EAAE,YAAY;SAC3B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,8GAAsB,EACtB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAe,EAAC,EAAE;YACnD,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;oBAC9D,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;oBACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBAEtB,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,CAAC,SAAiB,EAAE,EAAE;wBAC/D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;wBAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;oBACrB,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;aACF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;aAC3C;QACH,CAAC,CACA;IACH,CAAC;;sFApFU,mBAAmB;mGAAnB,mBAAmB;kEACnB,8DAAO;kEACP,wEAAY;;;;;;QCpBzB,yEACE;QAAA,+EAEE;QACA,2EACE;QAAA,uIAIkB;QAClB,yHAAsD;QACxD,qEAAe;QAGf,2EACE;QAAA,uIAIkB;QAClB,yHAAuD;QACzD,qEAAe;QAEf,2EACE;QAAA,uIAAuE;QACvE,2HAA8D;QAChE,qEAAe;QAGf,4EACE;QAAA,0IAEkB;QAClB,2HAA6D;QAC/D,qEAAe;QAGf,6EACE;QAAA,0IAIkB;QAClB,2HAAqE;QACvE,qEAAe;QAGf,6EACE;QAAA,yIAA8D;QAC9D,4HAIW;QACb,qEAAe;QAGf,wIAAqE;QAErE,0HAAoE;QACtE,4DAAY;QACZ,gFAA0F;QAC5F,4DAAM;;QA7DqC,0DAAyB;QAAzB,sFAAyB;QAwD/C,2DAAiC;QAAjC,iGAAiC;QAEpB,0DAA0B;QAA1B,kGAA0B;QAE3C,0DAAqC;QAArC,kJAAqC;;6FD3CzC,mBAAmB;cAL/B,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;+UAEqB,IAAI;kBAAvB,uDAAS;mBAAC,8DAAO;YACO,SAAS;kBAAjC,uDAAS;mBAAC,wEAAY;;;;;;;;;;;;;;AEpBzB;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,wBAAwB;IAEnC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;gGALU,wBAAwB;wGAAxB,wBAAwB;QCPrC,yEAA8C;QAAA,+EAAoB;QAAA,4DAAM;;6FDO3D,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAA2C;AACZ;;AAIxB,MAAM,iBAAiB;IAY1B;QAXA,6BAAwB,GAAG,IAAI,4CAAO,EAAgB,CAAC;QACvD,qBAAgB,GAAG,IAAI,4CAAO,EAAc,CAAC;QAC7C,4BAAuB,GAAG,IAAI,4CAAO,EAAgB,CAAC;QACtD,uBAAkB,GAAG,IAAI,4CAAO,EAAc,CAAC;QAC/C,4BAAuB,GAAG,IAAI,4CAAO,EAAgB,CAAC;QACtD,uBAAkB,GAAG,IAAI,4CAAO,EAAc,CAAC;QAEvC,sBAAiB,GAAgB,EAAE,CAAC;QACpC,qBAAgB,GAAiB,EAAE,CAAC;QACpC,qBAAgB,GAAiB,EAAE,CAAC;IAE7B,CAAC;IAChB,MAAM;IAEN,sBAAsB,CAAC,UAAqB;QACxC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC;IAED,aAAa,CAAC,KAAY;QACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,iBAAiB,CAAC,cAA4B;QAC1C,IAAI,CAAC,iBAAiB,GAAG,cAAc,CAAC;QACxC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,6BAA6B;IAC7B,wBAAwB,CAAC,UAAqB;QAC1C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;IAED,eAAe,CAAC,KAAY;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,mBAAmB,CAAC,cAA4B;QAC5C,IAAI,CAAC,gBAAgB,GAAG,cAAc,CAAC;QACvC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,YAAY;IACZ,wBAAwB,CAAC,UAAqB;QAC1C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IACzC,CAAC;IAED,mBAAmB,CAAC,gBAA6B;QAC7C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;IACrE,CAAC;;kFA9DQ,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBADN,MAAM;6FACjB,iBAAiB;cAD7B,wDAAU;eAAC,EAAC,UAAU,EAAC,MAAM,EAAC;;;;;;;;;;;;;;ACJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAC4B;AAEpB;;;;;;;AAO3C,MAAM,kBAAkB;IAQ7B,YAAoB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;QAN1D,eAAU,GAAwB,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,+DAAW,CAAC,OAAO,CAAC;aACnF,IAAI,CACH,0DAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAC7B,kEAAW,EAAE,CACd,CAAC;IAEyD,CAAC;;oFARnD,kBAAkB;kGAAlB,kBAAkB;QCV/B,iFACE;QAAA,kFACE;QAAA,4EACE;QAAA,2EAAU;QAAA,+DAAI;QAAA,4DAAW;QAC3B,4DAAS;QACT,qEAAI;QAAA,iEAAM;QAAA,4DAAK;QACf,qEAAiC;QACjC,sEACE;QAAA,uEAA2C;QAAA,uEAAU;QAAA,4DAAI;QACzD,wEAA6C;QAAA,yEAAY;QAAA,4DAAI;QAC7D,wEAAwC;QAAA,oEAAO;QAAA,4DAAI;QACnD,wEAA2C;QAAA,uEAAU;QAAA,4DAAI;QACzD,wEAA6C;QAAA,yEAAY;QAAA,4DAAI;QAC7D,wEAAwC;QAAA,oEAAO;QAAA,4DAAI;QAGrD,4DAAM;QACR,4DAAkB;QACpB,4DAAc;;QAVM,0DAA2B;QAA3B,oFAA2B;QAC3B,0DAA6B;QAA7B,sFAA6B;QAC7B,0DAAwB;QAAxB,iFAAwB;QACxB,0DAA2B;QAA3B,oFAA2B;QAC3B,0DAA6B;QAA7B,sFAA6B;QAC7B,0DAAwB;QAAxB,iFAAwB;;6FDH/B,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;aAC1C;;;;;;;;;;;;;;AETD;AAAA;AAAO,MAAM,UAAU;IAAvB;QAII,WAAM,GAAO,EAAE,CAAC;QAChB,YAAO,GAAO,EAAE,CAAC;QACjB,SAAI,GAAa,EAAE,CAAC;IACxB,CAAC;CAAA;;;;;;;;;;;;;ACPD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,yBAAyB;IAEpC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;kGALU,yBAAyB;yGAAzB,yBAAyB;QCPtC,oEAAG;QAAA,qEAAU;QAAA,4DAAI;;6FDOJ,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAA0D;AACe;;;;AAOlE,MAAM,sBAAsB;IAIjC,YACU,SAA+C,EACvB,IAAS,CAAC,gDAAgD;;QADlF,cAAS,GAAT,SAAS,CAAsC;QACvB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IACvC,CAAC;IAEF,QAAQ;IACR,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;4FAnBU,sBAAsB,0MAMvB,wEAAe;sGANd,sBAAsB;QCRnC,wEAAqB;QAAA,kEAAO;QAAA,4DAAK;QAEjC,qFACI;QAAA,yEAAwB;QAAA,uDAAwC;QAAA,4DAAM;QAC1E,4DAAqB;QAGrB,qFACI;QAAA,4EAA4D;QAArB,8IAAS,cAAU,IAAC;QAAC,iEAAM;QAAA,4DAAS;QAC3E,4EAAuD;QAApB,8IAAS,aAAS,IAAC;QAAC,gEAAK;QAAA,4DAAS;QACzE,4DAAqB;;QAPO,0DAAwC;QAAxC,kHAAwC;;6FDKvD,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;sBAOI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEd3B;AAAA;AAAA;AAA0C;;AAgBnC,MAAM,kBAAkB;IAL/B;QAME,2EAA2E;QAC3E,UAAK,GAAW;YACd,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,mBAAmB,EAAC;YAC/D,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAC;YAC5D,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,oBAAoB,EAAC;YAChE,EAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,mBAAmB,EAAC;SAC9D,CAAC;KACL;;oFARY,kBAAkB;kGAAlB,kBAAkB;QCf/B,sEACE;QAAA,yEAA0B;QAAA,4EAAiB;QAAA,4DAAM;QACjD,yEACE;QAAA,qJACA;QAAA,gEAAI;QAAA,gEACJ;QAAA,yIACA;QAAA,gEAAI;QAAA,gEACJ;QAAA,oLACA;QAAA,iEAAI;QAAA,iEACJ;QAAA,uHAA0D;QAAA,wEAA+C;QAAA,gEAAI;QAAA,4DAAI;QAAA,8DACnH;QAAA,4DAAM;QACR,4DAAM;;6FDIO,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;gBACzB,WAAW,EAAE,4BAA4B;gBACzC,SAAS,EAAE,CAAC,2BAA2B,CAAC;aACzC;;;;;;;;;;;;;;AEfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;AAQ3C,MAAM,YAAY;IAGvB,YAAoB,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;QAFzC,UAAK,GAAG,iBAAiB,CAAC;IAEkB,CAAC;IAE7C,QAAQ;IACR,CAAC;;wEANU,YAAY;4FAAZ,YAAY;QCRzB,4EAAiC;QACjC,yEACI;QAAA,2EAA+B;QACnC,4DAAM;;6FDKO,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACkC;AACnB;;;;;;;ICEjE,sEACI;IAAA,2EACI;IAAA,sEACA;IAAA,uDACF;IAAA,4DAAQ;IACd,4DAAM;;;;IAHyB,0DAAqB;IAArB,iFAAqB;IAC5C,0DACF;IADE,6GACF;;ADEP,MAAM,wBAAwB;IAWnC,YACU,SAAiD,EACjD,WAAwB,EACA,IAAS,CAAC,gDAAgD;;QAFlF,cAAS,GAAT,SAAS,CAAwC;QACjD,gBAAW,GAAX,WAAW,CAAa;QACA,SAAI,GAAJ,IAAI,CAAK;QAT3C,oBAAe,GAAoC,EAAE,CAAC;QAWpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACjC,CAAC;IAVF,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAmB,CAAC;IAChD,CAAC;IAUD,QAAQ;QACN,qBAAqB;QACrB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,SAAS,EAAC;YAC/B,IAAI,WAAW,GAAG;gBAChB,IAAI,EAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI;gBAC/C,KAAK,EAAE,KAAK,CAAC,GAAG;aACjB,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACxC;QAGD,cAAc;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,0DAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACtF,CAAC;IAED,QAAQ;QACN,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;aAC5C,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;aACnE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACzC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;gGArDU,wBAAwB,uUAczB,wEAAe;wGAdd,wBAAwB;QCVrC,wEAAqB;QAAA,qEAAU;QAAA,4DAAK;QAEpC,qFACI;QAAA,0EACI;QAAA,oHAKM;QACR,4DAAO;QACb,4DAAqB;QAGrB,qFACI;QAAA,4EAA+D;QAArB,gJAAS,cAAU,IAAC;QAAC,+DAAI;QAAA,4DAAS;QAC5E,4EAA6D;QAApB,gJAAS,aAAS,IAAC;QAAC,gEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAdX,0DAAkB;QAAlB,+EAAkB;QACG,0DAA6B;QAA7B,iGAA6B;;6FDM/C,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,WAAW,EAAE,qCAAqC;gBAClD,SAAS,EAAE,CAAC,oCAAoC,CAAC;aAClD;;sBAeI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEtB3B;AAAA;AAAO,MAAM,UAAU;CAOtB;;;;;;;;;;;;;ACND;AAAA;AAAO,MAAM,KAAK;IAAlB;QAGI,SAAI,GAAW,EAAE,CAAC;QAIlB,SAAI,GAAW,EAAE,CAAC;QAClB,sBAAiB,GAAuB,EAAE,CAAC;QAC3C,iBAAY,GAAkB,EAAE,CAAC;QACjC,SAAI,GAAa,EAAE,CAAC;IACxB,CAAC;CAAA;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACkC;AACnB;;;;;;;;;ICG7D,yEACI;IAAA,iFACI;IAAA,4EAAW;IAAA,uDAAQ;IAAA,4DAAY;IAC/B,sEACJ;IAAA,4DAAiB;IACrB,4DAAM;;;;IAHa,0DAAQ;IAAR,iFAAQ;IACkB,0DAA8B;IAA9B,0FAA8B;;ADChF,MAAM,qBAAqB;IAKhC,YACU,SAA8C,EAC9C,WAAwB,EACA,IAAS,CAAC,gDAAgD;;QAFlF,cAAS,GAAT,SAAS,CAAqC;QAC9C,gBAAW,GAAX,WAAW,CAAa;QACA,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAEF,QAAQ;QACN,kBAAkB;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,wDAAS,CAAC,EAAE,CAAC,CAAC;QAC/B,cAAc;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC;SACvC,CAAC,CAAC;QAEH,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SAC1B;QAAA,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,aAAa,CAAC,OAAO;QACnB,OAAO,IAAI,0DAAW,CAAC,OAAO,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,UAAU,CAAC,OAAO;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAc,CAAC;QACpD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,KAAK;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAgB,CAAC;IAClD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;0FA9CU,qBAAqB,uUAQtB,wEAAe;qGARd,qBAAqB;QCTlC,wEAAqB;QAAA,wEAAa;QAAA,4DAAK;QAEvC,qFACQ;QAAA,0EACA;QACI,iHAKM;QACV,4DAAO;QACf,4DAAqB;QAGrB,qFACI;QAAA,4EAA+D;QAArB,6IAAS,cAAU,IAAC;QAAC,+DAAI;QAAA,4DAAS;QAC5E,4EAA6D;QAApB,6IAAS,aAAS,IAAC;QAAC,gEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAfP,0DAAkB;QAAlB,+EAAkB;QAEmC,0DAAqC;QAArC,yGAAqC;;6FDI3F,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;sBASI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEjB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACoB;AAEqC;AACJ;AACrB;AACA;AACwB;AACT;;;;;;;;;;;;IC2CjF,sEACQ;IAAA,yEACI;IAAA,uDACA;IAAA,6EAAwH;IAAjC,4WAAgC;IAAC,iEAAM;IAAA,4DAAS;IACvI,4EAAoG;IAAnC,8WAAkC;IAAC,iEAAM;IAAA,4DAAS;IACvH,4DAAM;IACN,oEAA8B;IAClC,gEACJ;IAAA,4DAAM;;;IANM,0DACA;IADA,kHACA;;;;IAmDI,6EAEC;IADD,qfAAqD;IACpD,uDAAc;IAAA,4DAAS;;;IAAvB,0DAAc;IAAd,+EAAc;;;IAEnB,iEAAkE;;;IAE1D,6EAAsF;IAAA,6DAAE;IAAA,4DAAS;;;IAGjG,6EAAmF;IAAA,6DAAE;IAAA,4DAAS;;;;IAnB9G,sEACI;IAAA,0EACI;IAAA,6EAA8C;IAAA,uDAA6B;IAAA,4DAAS;IACpF,qFACA;IAAA,6EAAqD;IAA/B,qXAA8B;IAAC,iEAAM;IAAA,4DAAS;IACpE,6EAA6E;IAAvD,yeAAsD;IAAC,iEAAM;IAAA,4DAAS;IAC5F,4DAAW;IACX,8EAC4C;IAAA,wDAAoC;IAAA,4DAAS;IACzF,sFACI;IAAA,4IAEwB;IAC5B,4DAAW;IACX,sIAAkE;IAC9D,kOAEc;IACd,kOAEc;IAClB,8EAAsI;IAA7B,oXAA4B;IAAC,gEAAI;IAAA,4DAAS;IACvJ,4DAAM;IACV,4DAAM;;;;;;;;;IArBqB,0DAA0B;IAA1B,mFAA0B;IAAC,0DAA6B;IAA7B,2GAA6B;IAKhD,0DAAiC;IAAjC,mFAAiC;IAChB,0DAAoC;IAApC,8GAAoC;IAEpC,0DAA0B;IAA1B,+FAA0B;IAIhE,0DAAuB;IAAvB,qFAAuB;;;;IApCjD,sEACI;IACA,oFACI;IAAA,2FACI;IAAA,uDACA;IAAA,6EAAmH;IAA5B,0WAA2B;IAAC,oEAAS;IAAA,4DAAS;IACzI,4DAAuB;IACvB,yEACI;IAAA,yEACI;IAAA,iEACA;IAAA,6EAAwH;IAAjC,+WAAgC;IAAC,gEAAI;IAAA,4DAAS;IACzI,4DAAM;IACN,0EAAwB;IAAA,wDAAc;IAAA,4DAAM;IAC5C,iEACA;IAAA,iEACA;IAAA,0EACI;IAAA,yEACA;IAAA,8EAA+H;IAAxC,uXAAuC;IAAC,gEAAI;IAAA,4DAAS;IAChJ,4DAAM;IACN,0EAAwB;IAAA,wDAAqB;IAAA,4DAAM;IACnD,iEACA;IAAA,iEACA;IAAA,gIAuBM;IACV,4DAAM;IACV,4DAAgB;IAOpB,4DAAM;;;;IApDa,0DAAe;IAAf,wEAAe;IAEtB,0DACA;IADA,yFACA;IAOwB,0DAAc;IAAd,8EAAc;IAOd,0DAAqB;IAArB,qFAAqB;IAGtB,0DAAyB;IAAzB,qGAAyB;;AD3E7D,MAAM,yBAAyB;IAQpC,YACU,KAAqB,EACrB,MAAc,EACd,UAAsB,EACtB,MAAiB;QAHjB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAW;QAR3B,8BAA8B;QAC9B,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;IAQjC,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE5B,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;IAC9F,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACnF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC3E,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,CAAC;IAEF,kBAAkB;QAChB,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,YAAY,EAAE,iBAAiB;SAChC,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,8GAAsB,EACtB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAe,EAAC,EAAE;YACnD,IAAI,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACzE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAC,UAAU,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;gBAC5D,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;aAC/C;QACH,CAAC,CACA;IAKH,CAAC;IAED,aAAa,CAAC,OAAO;QACnB,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACvF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAAA,CAAC;IAEF,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;YAC1B,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;YACxC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;SAC3B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACtF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;aAC9C;QACH,CAAC,CACA;IACH,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;YAC1B,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;SACzC,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACtF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;aAClD;QACH,CAAC,CACA;IACH,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;YAC1B,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;SACzC,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,oHAAwB,EACxB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,cAAqB,EAAC,EAAE;YACzD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5B,IAAI,OAAO,cAAc,KAAK,OAAO,EAAE,EAAE;gBACvC,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACpG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;aAC9C;QACH,CAAC,CACA;IACH,CAAC;IAED,UAAU,CAAC,KAAK;QACd,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,wHAAwB,EACxB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,WAAoB,EAAC,EAAE;YACxD,IAAI,OAAO,WAAW,KAAK,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE;gBACvC,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,KAAK,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACvF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;wBAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;aACzC;QACH,CAAC,CACA;IACH,CAAC;IAED,WAAW,CAAC,KAAK;QACf,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,aAAa,CAAC,KAAK;QACjB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,EAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,cAAc,CAAC,KAAsB,EAAE,KAAW;QAChD,IAAI,WAA6B,CAAC;QAClC,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,iBAAiB,EAAE;YACzC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC/B;QACD,KAAK,IAAI,OAAO,IAAI,KAAK,CAAC,cAAc,EAAE;YACxC,IAAI,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACd,WAAW,GAAG,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC9C;SACF;QACD,yDAAyD;QACzD,2DAA2D;QAC3D,OAAO,WAAW;IACpB,CAAC;IAED,kBAAkB,CAAC,KAAqB,EAAE,KAAW;QACnD,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9C,IAAI,OAAM,CAAC,KAAK,CAAC,IAAI,WAAW,EAAC;YAC/B,OAAO,KAAK,CAAC,IAAI,CAAC;SACnB;aACI;YACH,OAAO,MAAM,CAAC;SACf;IAEH,CAAC;IAED,qBAAqB,CAAC,OAAO,EAAE,OAAO;QACpC,yHAAyH;QACzH,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YAC3E,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,OAAO,EAAE,OAAO;QACrC,IAAI,CAAC,UAAU,CAAC,8BAA8B,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;YACpF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;gBAC1F,IAAI,CAAC,UAAU,GAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,KAAK;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACjF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;aAC9C;QACH,CAAC,CACA;IACH,CAAC;IAED,eAAe,CAAC,KAAK;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;SAC/B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBACjF,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;aACvC;QACH,CAAC,CACA;IACH,CAAC;IAED,sBAAsB,CAAC,KAAK;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;SAC/B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,oHAAwB,EACxB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,cAAqB,EAAC,EAAE;YACzD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5B,IAAI,OAAO,cAAc,KAAK,OAAO,EAAE,EAAE;gBACvC,IAAI,CAAC,UAAU,CAAC,gCAAgC,CAAC,KAAK,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;oBAC/F,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,UAAqB,EAAC,EAAE;wBAC1F,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC/B,CAAC,CAAC,CAAC;gBACL,CAAC,CACA,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;aACzD;QACH,CAAC,CACA;IACH,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG;SAClC,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,uHAAyB,EACzB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,aAAa,EAAC,EAAE;YACjD,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAC3B,IAAI,OAAO,aAAa,KAAK,OAAO,EAAE,EAAE;gBACtC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;aAClF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;aACzD;QACH,CAAC,CACA;IACH,CAAC;IAED,wBAAwB;QACtB,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1E,CAAC;;kGAlVU,yBAAyB;yGAAzB,yBAAyB;QCpBtC,yEAAyC;QAAA,uDACrC;QACA,4EAA2F;QAAvB,iJAAS,gBAAY,IAAC;QAAC,4EAAiB;QAAA,4DAAS;QACrH,4EAAgG;QAA/B,iJAAS,wBAAoB,IAAC;QAAC,4EAAiB;QAAA,4DAAS;QAC9H,4DAAM;QAEN,yEACI;QAAA,mFACI;QACA,mFACI;QAAA,uFACQ;QAAA,gFACR;QAAA,4DAAuB;QACvB,0EACI;QACA,0EACI;QAAA,kEACA;QAAA,6EAAuF;QAAA,gEAAI;QAAA,4DAAS;QACxG,4DAAM;QACN,qEAA8B;QAC9B,iEACA;QACA,0EACI;QAAA,kEACA;QAAA,8EAA8G;QAAvB,kJAAS,gBAAY,IAAC;QAAC,gEAAI;QAAA,4DAAS;QAC/H,4DAAM;QACN,0EACI;QAAA,wDACJ;QAAA,4DAAM;QACN,iEACA;QACA,0EACI;QAAA,yEACA;QAAA,8EAAqH;QAA9B,kJAAS,uBAAmB,IAAC;QAAC,gEAAI;QAAA,4DAAS;QACtI,4DAAM;QACN,0EACI;QAAA,wDACJ;QAAA,4DAAM;QACN,iEACJ;QAAA,4DAAM;QAIV,4DAAgB;QAGhB,oFACI;QAAA,wFACQ;QAAA,2EAAc;QAAA,8EAA2F;QAAvB,kJAAS,gBAAY,IAAC;QAAC,qEAAS;QAAA,4DAAS;QACnI,4DAAuB;QACvB,0EACI;QAAA,wHAQM;QACV,4DAAM;QACV,4DAAgB;QACpB,4DAAgB;QACpB,4DAAM;QAEN,iEACA;QAAA,2EACI;QAAA,8EACA;QACA,8EAAwH;QAA/B,kJAAS,wBAAoB,IAAC;QAAC,0EAAc;QAAA,4DAAS;QACnJ,4DAAM;QACN,0EACI;QAAA,qFACI;QAAA,yHAsDM;QACV,4DAAgB;QACpB,4DAAM;;QAjImC,0DACrC;QADqC,gJACrC;QAQmB,0DAAe;QAAf,wEAAe;QAkBlB,2DACJ;QADI,+FACJ;QAQI,0DACJ;QADI,sGACJ;QASO,0DAAe;QAAf,wEAAe;QAKC,0DAA8B;QAA9B,oGAA8B;QAsBtC,0DAAgC;QAAhC,oGAAgC;;6FDrDlD,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;;;;;;;;;;;;;AEnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;;AAQpC,MAAM,sBAAsB;IAI/B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;IAC7C,CAAC;;4FAVI,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB;6FAAtB,sBAAsB;cADlC,wDAAU;;AAeJ,MAAM,kBAAkB;IAK3B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC;;oFAZI,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB;6FAAlB,kBAAkB;cAD9B,wDAAU;;AAiBJ,MAAM,wBAAwB;IAIjC,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;IAC9C,CAAC;;gGAVI,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB;6FAAxB,wBAAwB;cADpC,wDAAU;;AAeJ,MAAM,oBAAoB;IAK7B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,yCAAyC;QACzC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC;;wFAbI,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB;6FAApB,oBAAoB;cADhC,wDAAU;;AAkBJ,MAAM,wBAAwB;IAIjC,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE;IAC9C,CAAC;;gGAVI,wBAAwB;2GAAxB,wBAAwB,WAAxB,wBAAwB;6FAAxB,wBAAwB;cADpC,wDAAU;;AAeJ,MAAM,oBAAoB;IAK7B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,yCAAyC;QACzC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC;;wFAbI,oBAAoB;uGAApB,oBAAoB,WAApB,oBAAoB;6FAApB,oBAAoB;cADhC,wDAAU;;;;;;;;;;;;;;AClFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACO;AAET;AACT;AACO;AACe;AACT;AACqB;AACH;AACM;AACT;AAC0B;AACH;AACM;AACtC;AACS;AAC0B;AACH;AACM;AACzC;AACgB;AACxB;AAEA;AACG;AACH;AACM;AACN;AACE;AACE;AACF;AACE;AACO;AACf;AACU;AACN;AACgB;AACP;AACP;AACQ;AACV;AACC;AACA;AACO;AACT;AAC+C;AACpB;AACoB;AACL;AAC+F;AACnH;AACuD;AACjE;AACU;AACY;AACvC;AACgD;AACrB;AACyB;AACD;AAC/B;AAC+C;AAC3C;AAClB;AACoC;AACC;AACM;AACT;;AAiGlF,MAAM,SAAS;;wFAAT,SAAS,cAZR,2DAAY;4IAYb,SAAS,mBAtBT;QACT,yFAAsB,EAAE,qFAAkB;QAC1C,wFAAsB,EAAE,oFAAkB;QAC1C,0FAAwB,EAAE,sFAAoB;QAC9C,0FAAwB,EAAE,sFAAoB;QAC9C,0EAAiB,EAAE,sEAAa;KACjC,YAxCQ;YACP,uEAAa;YACb,oEAAgB;YAChB,uEAAa;YACb,6FAAuB;YACvB,sEAAgB;YAChB,yEAAe;YACf,qEAAa;YACb,2EAAgB;YAChB,qEAAa;YACb,qEAAa;YACb,uEAAc;YACd,yEAAe;YACf,uEAAc;YACd,yEAAe;YACf,2DAAW;YACX,gFAAkB;YAClB,mEAAmB;YACnB,sEAAgB;YAChB,iEAAY;YACZ,2EAAgB;YAChB,qEAAa;YACb,8EAAiB;YACjB,uEAAc;YACd,+EAAkB;YAClB,qEAAa;YACb,sEAAoB;YACpB,6EAAiB;YACjB,oEAAmB;YACnB,+DAAiB;YACjB,qEAAa;SACd;mIAyBU,SAAS,mBA5FlB,2DAAY;QACZ,kEAAa;QACb,iFAAkB;QAClB,wEAAe;QACf,6FAAmB;QACnB,0FAAkB;QAClB,gGAAoB;QACpB,wFAAoB;QACpB,kHAAwB;QACxB,+GAAuB;QACvB,qHAAyB;QACzB,+EAAiB;QACjB,wFAAoB;QACpB,kHAAwB;QACxB,+GAAuB;QACvB,qHAAyB;QACzB,4EAAgB;QAChB,oFAAkB;QAClB,kHAAwB;QACxB,8FAAmB;QACnB,kHAAwB;QACxB,gJAAkC;QAClC,yFAAiB;QACjB,qGAAqB;QACrB,8GAAwB;QACxB,yFAAiB;QACjB,kHAAwB;QACxB,iHAAyB;QACzB,kFAAkB;QAClB,iIAA6B;QAC7B,sFAAgB;QAChB,wGAAsB;QACtB,yGAAsB;QACtB,+GAAwB;QACxB,sGAAqB,aAGrB,uEAAa;QACb,oEAAgB;QAChB,uEAAa;QACb,6FAAuB;QACvB,sEAAgB;QAChB,yEAAe;QACf,qEAAa;QACb,2EAAgB;QAChB,qEAAa;QACb,qEAAa;QACb,uEAAc;QACd,yEAAe;QACf,uEAAc;QACd,yEAAe;QACf,2DAAW;QACX,gFAAkB;QAClB,mEAAmB;QACnB,sEAAgB;QAChB,iEAAY;QACZ,2EAAgB;QAChB,qEAAa;QACb,8EAAiB;QACjB,uEAAc;QACd,+EAAkB;QAClB,qEAAa;QACb,sEAAoB;QACpB,6EAAiB;QACjB,oEAAmB;QACnB,+DAAiB;QACjB,qEAAa;6FA0BJ,SAAS;cA9FrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,kEAAa;oBACb,iFAAkB;oBAClB,wEAAe;oBACf,6FAAmB;oBACnB,0FAAkB;oBAClB,gGAAoB;oBACpB,wFAAoB;oBACpB,kHAAwB;oBACxB,+GAAuB;oBACvB,qHAAyB;oBACzB,+EAAiB;oBACjB,wFAAoB;oBACpB,kHAAwB;oBACxB,+GAAuB;oBACvB,qHAAyB;oBACzB,4EAAgB;oBAChB,oFAAkB;oBAClB,kHAAwB;oBACxB,8FAAmB;oBACnB,kHAAwB;oBACxB,gJAAkC;oBAClC,yFAAiB;oBACjB,qGAAqB;oBACrB,8GAAwB;oBACxB,yFAAiB;oBACjB,kHAAwB;oBACxB,iHAAyB;oBACzB,kFAAkB;oBAClB,iIAA6B;oBAC7B,sFAAgB;oBAChB,wGAAsB;oBACtB,yGAAsB;oBACtB,+GAAwB;oBACxB,sGAAqB;iBACtB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,uEAAa;oBACb,6FAAuB;oBACvB,sEAAgB;oBAChB,yEAAe;oBACf,qEAAa;oBACb,2EAAgB;oBAChB,qEAAa;oBACb,qEAAa;oBACb,uEAAc;oBACd,yEAAe;oBACf,uEAAc;oBACd,yEAAe;oBACf,2DAAW;oBACX,gFAAkB;oBAClB,mEAAmB;oBACnB,sEAAgB;oBAChB,iEAAY;oBACZ,2EAAgB;oBAChB,qEAAa;oBACb,8EAAiB;oBACjB,uEAAc;oBACd,+EAAkB;oBAClB,qEAAa;oBACb,sEAAoB;oBACpB,6EAAiB;oBACjB,oEAAmB;oBACnB,+DAAiB;oBACjB,qEAAa;iBACd;gBACD,OAAO,EAAE,EACR;gBACD,SAAS,EAAE;oBACT,yFAAsB,EAAE,qFAAkB;oBAC1C,wFAAsB,EAAE,oFAAkB;oBAC1C,0FAAwB,EAAE,sFAAoB;oBAC9C,0FAAwB,EAAE,sFAAoB;oBAC9C,0EAAiB,EAAE,sEAAa;iBACjC;gBACD,OAAO,EAAE;oBACP,oEAAsB;iBACvB;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;gBACzB,eAAe,EAAE;oBACf,kHAAwB;oBACxB,gJAAkC;oBAClC,qGAAqB;oBACrB,yFAAiB;oBACjB,8GAAwB;oBACxB,yFAAiB;oBACjB,iHAAyB;oBACzB,wGAAsB;iBACvB;aACF;;;;;;;;;;;;;;ACpKD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;AAO3C,MAAM,eAAe;IAE1B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EALU,eAAe;+FAAf,eAAe;QCP5B,yEAA0B;QAAA,iEAAM;QAAA,4DAAM;QACtC,mFACI;QAAA,mFACI;QAAA,yEACI;QAAA,6EAAmC;QACvC,4DAAM;QACV,4DAAgB;QAChB,gFACI;QAAA,yEACI;QAAA,2EAA+B;QACnC,4DAAM;QACV,4DAAgB;QACpB,4DAAgB;;QAVG,0DAAe;QAAf,wEAAe;;6FDKrB,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;;ICKlD,sEACI;IAAA,yEAAwB;IAAA,uDAAkC;IAAA,4DAAM;IAChE,yEAAwB;IAAA,uDAAyC;IAAA,4DAAM;IACvE,yEAAwB;IAAA,+DAAI;IAAA,4DAAM;IAClC,yEAAwB;IAAA,uDAAc;IAAA,4DAAM;IAC5C,gEACJ;IAAA,4DAAM;;;IALsB,0DAAkC;IAAlC,gHAAkC;IAClC,0DAAyC;IAAzC,kHAAyC;IAEzC,0DAAc;IAAd,8EAAc;;ADGnC,MAAM,uBAAuB;IAIlC,YACU,iBAAoC,EACpC,KAAqB,EACrB,MAAc,EACd,UAAsB;QAHtB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;IAC5B,CAAC;IAEL,QAAQ;QACN,iCAAiC;QACjC,qGAAqG;QACrG,kCAAkC;QAClC,MAAM;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;;8FAvBU,uBAAuB;uGAAvB,uBAAuB;QCZpC,yEAAuB;QAAA,uDAA4C;QAAA,4DAAM;QACzE,yEAAwB;QAAA,uDAAmB;QAAA,4DAAM;QACjD,gEACA;QAAA,gEACA;QAAA,yEAA8B;QAAA,iEAAM;QAAA,4DAAM;QAC1C,oHAMM;QACN,oEAEM;;QAdiB,0DAA4C;QAA5C,4HAA4C;QAC3C,0DAAmB;QAAnB,oFAAmB;QAIpB,0DAA8B;QAA9B,oGAA8B;;6FDOxC,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;AEXD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;AAQ3C,MAAM,sBAAsB;IAOjC,YACU,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QANhC,8BAAyB,GAAQ,EAAE,CAAC;QACpC,mCAA8B,GAAQ,EAAE,CAAC;QACzC,mBAAc,GAAQ,EAAE,CAAC;QACzB,wBAAmB,GAAQ,EAAE,CAAC;IAI1B,CAAC;IAEL,QAAQ;IACR,CAAC;IAED,aAAa;QACX,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,CAAC;IACrE,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,SAAS,EAAE,CAAC;IAC/E,CAAC;;4FApBU,sBAAsB;sGAAtB,sBAAsB;QCPnC,yEACI;QAAA,2FACJ;QAAA,4DAAM;QACN,uEACI;QAAA,oFACE;QAAA,+EAA+D;QAAA,mEAAQ;QAAA,4DAAY;QACnF,2EACF;QADuH,kMAA4B;QAAjJ,4DACF;QAAA,4DAAiB;QACrB,4DAAO;QACP,gEACA;QAAA,4EAA8F;QAA1B,8IAAS,mBAAe,IAAC;QAAC,+EAAoB;QAAA,4DAAS;QAC3H,0EAAwB;QAAA,wDAA6B;QAAA,4DAAM;QAC3D,iEACA;QAAA,iEAAI;QAAA,iEACJ;QACA,iEACA;QAAA,0EACI;QAAA,iGACJ;QAAA,4DAAM;QACN,wEACI;QAAA,qFACE;QAAA,gFAAkF;QAAA,oEAAQ;QAAA,4DAAY;QACtG,4EACF;QAD2I,wMAAiC;QAA1K,4DACF;QAAA,4DAAiB;QACrB,4DAAO;QACP,iEACA;QAAA,6EAAmG;QAA/B,+IAAS,wBAAoB,IAAC;QAAC,gFAAoB;QAAA,4DAAS;QAChI,0EAAwB;QAAA,wDAAkC;QAAA,4DAAM;;QArB2D,0DAA4B;QAA5B,uFAA4B;QAK/H,0DAA6B;QAA7B,8FAA6B;QAW0F,2DAAiC;QAAjC,4FAAiC;QAKxJ,0DAAkC;QAAlC,mGAAkC;;6FDpB7C,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,gCAAgC,CAAC;aAC9C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;AACX;AAEqC;;;;;;;;;;;;;;;;ICmDzF,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF+D,oFAAwB;IAClG,0DACF;IADE,+FACF;;;IAdV,oFACI;IAAA,2FACI;IAAA,0EACI;IAAA,uDACJ;IAAA,4DAAM;IAIV,4DAAuB;IACvB,oFACI;IAAA,gFAA6B;IAAA,gEAAK;IAAA,4DAAY;IAC9C,iFACE;IAAA,0KAEa;IACf,4DAAa;IACjB,4DAAiB;IACrB,4DAAgB;;;;;IAjBD,wEAAe;IAGlB,0DACJ;IADI,4FACJ;IAOiC,0DAA8D;IAA9D,iIAA8D;IAC7C,0DAA0B;IAA1B,sGAA0B;;;;IA5BxF,mFACI;IACA,oFACI;IAAA,2EACI;IAAA,qEACJ;IAAA,4DAAW;IACX,2FACI;IAAA,0EACI;IAAA,uDACJ;IAAA,4DAAM;IACN,0EACI;IAAA,6EAA0E;IAAnC,oXAAkC;IAAC,4DAAC;IAAA,4DAAS;IACxF,4DAAM;IACV,4DAAuB;IAC3B,4DAAgB;IAEhB,iKAiBgB;IACpB,4DAAgB;;;;;IAhCG,0DAAe;IAAf,wEAAe;IAEF,0DAA0B;IAA1B,yJAA0B;IAI1C,0DACJ;IADI,kHACJ;IAO0C,0DAAe;IAAf,wFAAe;;AD7BlE,MAAM,6BAA6B;IAWxC,YACU,KAAqB,EACrB,MAAc,EACd,UAAsB,EACtB,MAAiB,EACjB,WAAwB;QAJxB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAW;QACjB,gBAAW,GAAX,WAAW,CAAa;QAflC,mBAAc,GAAY,EAAE,CAAC;QAC7B,cAAS,GAAY,EAAE,CAAC;QAGxB,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;QACrC,kBAAa,GAAW,CAAC,CAAC;QAC1B,iBAAY,GAAG,EAAE,CAAC;QAClB,iBAAY,GAAG,EAAE,CAAC;QAClB,mBAAc,GAAU,EAAE,CAAC;IAQrB,CAAC;IAEP,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACxC,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;aACpD,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE7C,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;IAC9F,CAAC;IAGD,WAAW,CAAC,OAAO,EAAE,aAAa;QAChC,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YAC5C,IAAI,GAAG,GAAG,OAAO,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;YAClD,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACjE;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,aAAa,CAAC,KAAW;QACvB,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,iBAAiB,EAAE;YACzC,OAAO,CAAC,IAAI,CAAC;gBACX,OAAO,EAAE,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI;aAC1C,CAAC;SACH;QAAA,CAAC;QACF,OAAO,OAAO;IAChB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACnD,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE;YACrC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YAC3D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC1D;QAAA,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,wDAAS,CAAC,aAAa,CAAC,CAAC;IAEjD,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,wHAAwB,EACxB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,WAAoB,EAAC,EAAE;YACxD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,OAAO,WAAW,KAAK,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE;gBACvC,KAAK,IAAI,OAAO,IAAI,WAAW,EAAE;oBAC/B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBAC/D,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAClC,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,IAAW,EAAC,EAAE;wBACxE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;aACxC;QACH,CAAC,CACA;IACH,CAAC;IAED,qBAAqB,CAAC,KAAY;QAChC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,sBAAsB;QACpB,+CAA+C;QAC/C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,KAAK,EAAE,IAAK,EAAE,IAAK;QACvB,IAAI,OAAO,IAAI,IAAI,WAAW,EAAE;YAC5B,oBAAoB;YACpB,IAAI,GAAG,KAAK,CAAC;YACb,KAAK,GAAG,CAAC,CAAC;SACb;QAED,IAAI,OAAO,IAAI,IAAI,WAAW,EAAE;YAC5B,IAAI,GAAG,CAAC,CAAC;SACZ;QAED,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,EAAE;YAC5D,OAAO,EAAE,CAAC;SACb;QAED,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE;YAC3D,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAClB;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAAA,CAAC;;0GA9HW,6BAA6B;6GAA7B,6BAA6B;QCd1C,yEACI;QAAA,gEACA;QAAA,mIACA;QAAA,gEAAI;QAAA,gEACJ;QAAA,mIACA;QAAA,gEACA;QAAA,mKACA;QAAA,gEACA;QAAA,gHACA;QAAA,iEACA;QAAA,yJACA;QAAA,iEACJ;QAAA,4DAAM;QACN,uEACI;QACI,qFACI;QAAA,gFAA+B;QAAA,6EAAiB;QAAA,4DAAY;QAC5D,4EACJ;QADqD,yMAA2B;QAA5E,4DACJ;QAAA,4DAAiB;QAErB,uEACI;QAAA,6EAAiE;QAAvB,sJAAS,gBAAY,IAAC;QAAC,sEAAU;QAAA,4DAAS;QACxF,4DAAM;QACV,4DAAM;QACN,iEACA;QAAA,6EAAiG;QAAvD,sJAAS,qBAAiB,IAAC;QAA4B,2EAAe;QAAA,4DAAS;QACzH,2EACI;QAAA,gJAkCgB;QACpB,4DAAO;QACP,iEACA;QAAA,0EAA0C;QAAA,qEAAS;QAAA,iEAAK;QAAA,8IAAiF;QAAA,iEAAK;QAAA,qFAAwB;QAAA,4DAAM;QAC5K,6EAA6E;QAAnC,sJAAS,4BAAwB,IAAC;QAAC,kFAAsB;QAAA,4DAAS;;QAhD/C,2DAA2B;QAA3B,sFAA2B;QASlF,0DAAwB;QAAxB,qFAAwB;QACgC,0DAAmB;QAAnB,uFAAmB;;6FDbpE,6BAA6B;cALzC,uDAAS;eAAC;gBACT,QAAQ,EAAE,4BAA4B;gBACtC,WAAW,EAAE,yCAAyC;gBACtD,SAAS,EAAE,CAAC,wCAAwC,CAAC;aACtD;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqE;;;;;;;;;ICKrE,sEACI;IAAA,yEAAsB;IAAA,uDAAK;IAAA,4DAAM;IACrC,4DAAM;;;IADoB,0DAAK;IAAL,qEAAK;;;IAwB/B,yEAAqG;IAAA,uDAAgD;IAAA,4DAAM;;;IAAtD,0DAAgD;IAAhD,8HAAgD;;ADjB9I,MAAM,kBAAkB;IAI7B,YACU,YAA0B,EAC1B,KAAqB,EACrB,MAAc,EACd,UAAsB;QAHtB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,eAAU,GAAV,UAAU,CAAY;IAC5B,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAC,UAAU,EAAC,IAAI,CAAC,KAAK,EAAC,CAAC,CAAC;IAClE,CAAC;;oFAnBU,kBAAkB;kGAAlB,kBAAkB;QCb/B,yEAAyB;QAAA,uDAAkC;QAAA,4DAAM;QACjE,yEAAwB;QAAA,uDAAc;QAAA,4DAAM;QAC5C,gEAAI;QAAA,gEACJ;QACA,yEAAwB;QAAA,mEAAQ;QAAA,4DAAM;QACtC,8GAEM;QACN,gEACA;QAEA,0EAAwB;QAAA,sEAAU;QAAA,4DAAM;QACxC,0EACI;QAAA,wDACJ;QAAA,4DAAM;QACN,iEACA;QACA,0EACI;QAAA,wDACJ;QAAA,4DAAM;QACN,iEACA;QACA,0EACI;QAAA,wDACJ;QAAA,4DAAM;QACN,iEACA;QACA,0EAAwB;QAAA,kEAAM;QAAA,4DAAM;QACpC,0EAAwB;QAAA,wDAAwC;QAAA,4DAAM;QACtE,0EAAwB;QAAA,wDAA8C;QAAA,4DAAM;QAC5E,gHAA2J;QAC3J,iEACA;QAIA,0EACI;QAAA,6EAA0G;QAArB,2IAAS,cAAU,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAC7H,4DAAM;;QAtCmB,0DAAkC;QAAlC,kHAAkC;QACnC,0DAAc;QAAd,+EAAc;QAInB,0DAAyC;QAAzC,+GAAyC;QAQxD,0DACJ;QADI,gOACJ;QAII,0DACJ;QADI,gOACJ;QAII,0DACJ;QADI,uOACJ;QAIwB,0DAAwC;QAAxC,kHAAwC;QACxC,0DAA8C;QAA9C,wHAA8C;QACG,0DAA0B;QAA1B,gGAA0B;;6FDjBtF,kBAAkB;cAN9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,4BAA4B,CAAC;gBACzC,aAAa,EAAE,+DAAiB,CAAC,IAAI;aACtC;;;;;;;;;;;;;;AEZD;AAAA;AAAA;AAAA;AAAA;AAA2C;;;AAQpC,MAAM,sBAAsB;IAI/B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;IAC7C,CAAC;;4FAVI,sBAAsB;yGAAtB,sBAAsB,WAAtB,sBAAsB;6FAAtB,sBAAsB;cADlC,wDAAU;;AAeJ,MAAM,kBAAkB;IAK3B,YACY,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;IAC9B,CAAC;IAEJ,OAAO,CAAC,KAA6B,EAAE,KAA0B;QAC7D,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACpD,CAAC;;oFAZI,kBAAkB;qGAAlB,kBAAkB,WAAlB,kBAAkB;6FAAlB,kBAAkB;cAD9B,wDAAU;;;;;;;;;;;;;;ACrBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACoB;AAGY;;;;;;;;AAU3E,MAAM,uBAAuB;IAKlC,YACU,KAAqB,EACrB,MAAc,EACd,MAAiB,EACjB,UAAsB;QAHtB,UAAK,GAAL,KAAK,CAAgB;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,WAAM,GAAN,MAAM,CAAW;QACjB,eAAU,GAAV,UAAU,CAAY;QANhC,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;IAOjC,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;IAC9F,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;SAC3B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,+FAAiB,EACjB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,OAAc,EAAC,EAAE;YAClD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,IAAI,OAAO,OAAO,KAAK,OAAO,EAAE,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;aAChF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;aACvC;QACH,CAAC,CACA;IACH,CAAC;;8FA1CU,uBAAuB;uGAAvB,uBAAuB;QCdpC,yEAAyB;QAAA,uDAA4C;QAAA,4DAAM;QAE3E,gEAAI;QAAA,gEACJ;QAAA,yEAAwB;QAAA,0EAAe;QAAA,4DAAM;QAC7C,yEAAwB;QAAA,uDAAsB;QAAA,4DAAM;QACpD,yEAAwB;QAAA,iEAAM;QAAA,4DAAM;QACpC,0EAAwB;QAAA,wDAA4B;;QAAA,4DAAM;QAE1D,0EACI;QAAA,6EAAyF;QAArB,gJAAS,cAAU,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAC5G,4DAAM;;QAVmB,0DAA4C;QAA5C,4HAA4C;QAI7C,0DAAsB;QAAtB,uFAAsB;QAEtB,0DAA4B;QAA5B,wJAA4B;;6FDQvC,uBAAuB;cALnC,uDAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;gBAC/B,WAAW,EAAE,kCAAkC;gBAC/C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;;;;;;;;;;;;;AEbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;AAa3C,MAAM,oBAAoB;IAE/B,gBACI,CAAC;IAEL,QAAQ;IACR,CAAC;;wFANU,oBAAoB;oGAApB,oBAAoB;QCbjC,yEAA0B;QAAA,sEAAW;QAAA,4DAAM;QAC3C,mFACI;QAAA,mFACI;QAAA,yEACI;QAAA,kFAA6C;QACjD,4DAAM;QACV,4DAAgB;QAChB,gFACI;QAAA,yEACI;QAAA,2EAA+B;QACnC,4DAAM;QACV,4DAAgB;QACpB,4DAAgB;;QAVG,0DAAe;QAAf,wEAAe;;6FDWrB,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,iBAAiB;gBAC3B,WAAW,EAAE,8BAA8B;gBAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;AAQ3C,MAAM,wBAAwB;IAcnC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAb1C,UAAK,GAAG,UAAU,CAAC;QACnB,oBAAe,GAAW,EAAE,CAAC;QAC7B,mBAAc,GAAG,EAAE,CAAC;QACpB,qBAAgB,GAAQ,EAAE,CAAC;QAC3B,yBAAoB,GAAQ,EAAE,CAAC;QAG/B,gBAAW,GAAG;YACZ,OAAO;YACP,kBAAkB;YAClB,UAAU;SACX,CAAC;QACF,eAAU,GAAQ,OAAO,CAAC;IACoB,CAAC;IAE/C,QAAQ;IACR,CAAC;IAED,qBAAqB,CAAC,GAAG,EAAE,IAAI;QAC7B,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,SAAS,CACnD,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,cAAc,GAAG,OAAO,GAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtE,CAAC,EACD,CAAC,GAAG,EAAE,EAAE,GAAE,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAC,CAC7B;IACH,CAAC;IAED,8BAA8B;QAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAE3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,IAAI,CAAC,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;SACxD;IACH,CAAC;IAAA,CAAC;IAEF,qBAAqB,CAAC,KAAK;QACvB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpD,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;SACpD;IACL,CAAC;IAAA,CAAC;IAEF,sBAAsB,CAAC,KAAK;QACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;IAAA,CAAC;IAEF,kCAAkC;QAChC,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;YAC9E,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;;gGAvDU,wBAAwB;wGAAxB,wBAAwB;QCErC,gEACA;QAAA,yEACI;QAAA,oJACF;QAAA,4DAAM;QACN,yEACE;QAAA,qEAAS;QAAA,gEACT;QAAA,uJACA;QAAA,gEACA;QAAA,gEACA;QAAA,+IACA;QAAA,iEACA;QAAA,wEACE;QAAA,qFACE;QAAA,gFAAoC;QAAA,oEAAQ;QAAA,4DAAY;QACxD,4EACF;QAD6G,qMAA4B;QAAvI,4DACF;QAAA,4DAAiB;QACnB,4DAAO;QACP,iEACA;QAAA,6EAAmH;QAA/C,iJAAS,wCAAoC,IAAC;QAAC,gFAAoB;QAAA,4DAAS;QACpJ,0EAAwB;QAAA,wDAAwB;QAAA,4DAAM;QAfpD,4DACE;;QAS+G,2DAA4B;QAA5B,uFAA4B;QAKvH,0DAAwB;QAAxB,yFAAwB;;6FDrBnC,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACiD;AACN;AACG;AAC0F;AACpH;AACN;AACA;AACmC;AACN;AACG;AAC1B;AACqB;AACZ;AACN;AACG;AACrB;AACgB;AACV;AACH;;;AAE/D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE;IACzD,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,iFAAkB,EAAE;IACpD,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,yEAAe,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,0EAAiB,EAAC,EAAE,QAAQ,EAAE;YAC/F,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,8FAAmB,EAAE;YAC5C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,2FAAkB,EAAE,OAAO,EAAE,EAAC,KAAK,EAAC,sEAAa,EAAC,EAAE;SACpF,EAAE;IACH,EAAE,IAAI,EAAE,mBAAmB,EAAE,SAAS,EAAE,iGAAoB,EAAE,OAAO,EAAE,EAAC,KAAK,EAAC,sEAAa,EAAC,EAAE;IAC9F,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,wFAAoB,EAAE,OAAO,EAAE,EAAC,cAAc,EAAE,yFAAsB,EAAC,EAAE,QAAQ,EAAE;YACnH,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,kHAAwB,EAAE;YACjD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,+GAAuB,EAAE,OAAO,EAAE,EAAC,UAAU,EAAC,qFAAkB,EAAC,EAAE;SACnG,EAAC;IACF,EAAE,IAAI,EAAE,wBAAwB,EAAE,SAAS,EAAE,oHAAyB,EAAE,OAAO,EAAE,EAAC,UAAU,EAAC,qFAAkB,EAAE,SAAS,EAAE,0EAAiB,EAAC,EAAE;IAChJ,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,uFAAoB,EAAE,OAAO,EAAE,EAAC,cAAc,EAAE,uFAAsB,EAAE,EAAE,QAAQ,EAAE;YACpH,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,iHAAwB,EAAE;YACjD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,8GAAuB,EAAE,OAAO,EAAE,EAAC,UAAU,EAAC,mFAAkB,EAAC,EAAE;SACnG,EAAE;IACH,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,iFAAkB,EAAE,OAAO,EAAE,EAAC,SAAS,EAAE,0EAAiB,EAAE,gBAAgB,EAAE,yFAAwB,EAAC,EAAE;IACzI,EAAE,IAAI,EAAE,wBAAwB,EAAE,SAAS,EAAE,oHAAyB,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,mFAAkB,EAAE,EAAE;IACrH,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,+EAAiB,EAAE;IAChD,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,4EAAgB,EAAE;CACjD,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,EAC9C,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;gBACxD,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;AChDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACkB;AAEP;;;;;;;;AAOtD,MAAM,kCAAkC;IAI7C,YACQ,SAA2D;IACjE,6FAA6F;;QADvF,cAAS,GAAT,SAAS,CAAkD;IAEhE,CAAC;IAIJ,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAChD,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC3B,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;YAC3B,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;SACnC,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,6CAA6C;QAC7C,IAAI,aAAa,GAAG,IAAI,0EAAU,EAAE;QACpC,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACvB,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;QACxD,aAAa,CAAC,gBAAgB,GAAG,EAAE,CAAC;QACpC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;oHAnCU,kCAAkC;kHAAlC,kCAAkC;QCV/C,wEAAqB;QAAA,yEAAc;QAAA,4DAAK;QAExC,qFACI;QAAA,0EACI;QACA,yEACI;QAAA,oFACI;QAAA,+EAAsB;QAAA,+DAAI;QAAA,4DAAY;QACtC,yEACJ;QAAA,4DAAiB;QACrB,4DAAM;QAEN,0EACI;QAAA,qFACI;QAAA,gFAAsB;QAAA,gEAAI;QAAA,4DAAY;QACtC,0EACJ;QAAA,4DAAiB;QACrB,4DAAM;QAEN,0EACI;QAAA,qFACI;QAAA,iFAAsB;QAAA,gEAAI;QAAA,4DAAY;QACtC,+EAGmC;QACvC,4DAAiB;QACrB,4DAAM;QAEN,0EACI;QAAA,qFACI;QAAA,iFAA6B;QAAA,uEAAW;QAAA,4DAAY;QACpD,+EAGmC;QACvC,4DAAiB;QACrB,4DAAM;QAEV,4DAAO;QACX,4DAAqB;QAErB,sFACI;QAAA,8EAA+D;QAArB,2JAAS,cAAU,IAAC;QAAC,6EAAiB;QAAA,4DAAS;QAEzF,8EAA6D;QAApB,2JAAS,aAAS,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAE/E,4DAAqB;;QA5CX,0DAAkB;QAAlB,+EAAkB;;6FDOf,kCAAkC;cAL9C,uDAAS;eAAC;gBACT,QAAQ,EAAE,kCAAkC;gBAC5C,WAAW,EAAE,+CAA+C;gBAC5D,SAAS,EAAE,CAAC,8CAA8C,CAAC;aAC5D;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACU;AACK;;;;;;;;AAOlE,MAAM,wBAAwB;IAKnC,YACU,SAAiD,EACzB,IAAS,CAAC,gDAAgD;;QADlF,cAAS,GAAT,SAAS,CAAwC;QACzB,SAAI,GAAJ,IAAI,CAAK;QAEzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACrC,CAAC;IAEF,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,wDAAS,CAAC;YACxB,aAAa,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC,WAAW,EAAE,yDAAU,CAAC,QAAQ,CAAC;SACtE,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;gGAzBU,wBAAwB,0MAOzB,wEAAe;wGAPd,wBAAwB;QCTrC,wEAAqB;QAAA,2EAAgB;QAAA,4DAAK;QAE1C,qFACI;QAAA,0EACI;QACA,yEACI;QAAA,oFACI;QAAA,+EAA6B;QAAA,sEAAW;QAAA,4DAAY;QACpD,4EAIY;QAChB,4DAAiB;QACrB,4DAAM;QACV,4DAAO;QACX,4DAAqB;QAGrB,sFACI;QAAA,6EAA+D;QAArB,iJAAS,cAAU,IAAC;QAAC,gEAAI;QAAA,4DAAS;QAC5E,6EAA6D;QAApB,iJAAS,aAAS,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAnBX,0DAAkB;QAAlB,+EAAkB;;6FDMf,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,sBAAsB;gBAChC,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kCAAkC,CAAC;aAChD;;sBAQI,oDAAM;uBAAC,wEAAe;;;;;;;;;;;;;;AEhB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC+B;;;;;;;;AAQ1E,MAAM,yBAAyB;IAGpC,YACU,WAAwB,EACxB,SAAkD;IAC1D,6FAA6F;;QAFrF,gBAAW,GAAX,WAAW,CAAa;QACxB,cAAS,GAAT,SAAS,CAAyC;IAExD,CAAC;IAIL,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACjC,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,KAAK;YACf,YAAY,EAAE,KAAK;YACnB,YAAY,EAAE,KAAK;YACnB,SAAS,EAAE,KAAK;YAChB,qBAAqB,EAAE,IAAI,0DAAW,CAAC,CAAC,CAAC,CAAC;YAC1C,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;YAC5B,KAAK,EAAE,IAAI,0DAAW,CAAC,IAAI,CAAC;SAC7B,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,6CAA6C;QAC7C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;;kGAlCU,yBAAyB;yGAAzB,yBAAyB;QCTtC,wEAAqB;QAAA,4EAAiB;QAAA,4DAAK;QAE3C,qFACI;QAAA,0EACI;QACA,sEACI;QAAA,kFAAuC;QAAA,0EAAe;QAAA,4DAAe;QACzE,4DAAM;QACN,sEACI;QAAA,kFAAsC;QAAA,yEAAc;QAAA,4DAAe;QACvE,4DAAM;QACN,uEACI;QAAA,mFAAyC;QAAA,8FAAkC;QAAA,4DAAe;QAC9F,4DAAM;QACN,uEACI;QAAA,mFAA6C;QAAA,uFAA2B;QAAA,4DAAe;QAC3F,4DAAM;QACN,uEACI;QAAA,mFAAqC;QAAA,iFAAqB;QAAA,4DAAe;QAC7E,4DAAM;QACN,uEACI;QAAA,mFAA6C;QAAA,kGAAsC;QAAA,4DAAe;QACtG,4DAAM;QACN,uEACI;QAAA,mFAA0C;QAAA,uFAA2B;QAAA,4DAAe;QACxF,4DAAM;QACN,uEACI;QAAA,kFACI;QAAA,gFAEI;QAAA,8EAAiB;QAAA,4DAAY;QACjC,wEACJ;QAAA,4DAAiB;QACrB,4DAAM;QACN,uEACI;QAAA,kFACI;QAAA,iFAAuB;QAAA,uEAAW;QAAA,4DAAY;QAC9C,wEACJ;QAAA,4DAAiB;QACrB,4DAAM;QACN,uEACI;QAAA,kFACI;QAAA,iFAAuB;QAAA,uEAAW;QAAA,4DAAY;QAC9C,wEACJ;QAAA,4DAAiB;QACrB,4DAAM;QACV,4DAAO;QACX,4DAAqB;QAErB,sFACI;QAAA,8EAA+D;QAArB,kJAAS,cAAU,IAAC;QAAC,kEAAM;QAAA,4DAAS;QAC9E,8EAA6D;QAApB,kJAAS,aAAS,IAAC;QAAC,iEAAK;QAAA,4DAAS;QAC/E,4DAAqB;;QAjDX,0DAAkB;QAAlB,+EAAkB;;6FDMf,yBAAyB;cALrC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,mCAAmC,CAAC;aACjD;;;;;;;;;;;;;;AERD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;;;;;;ICM1C,uFACE;IAAA,uDACF;IAAA,4DAAmB;;;IAF6D,0EAAc;IAC5F,0DACF;IADE,mFACF;;;;IAWF,2FACE;IADgE,iYAA4B;IAC5F,qFAAoB;IAAA,uDAA2B;IAAA,4DAAqB;IACtE,4DAAuB;;;IAFwB,2EAAkB;IAC3C,0DAA2B;IAA3B,qGAA2B;;ADZhD,MAAM,qBAAqB;IAchC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAb1C,UAAK,GAAG,UAAU,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QACpB,YAAO,GAAG,EAAE,CAAC;QACb,mBAAc,GAAG,EAAE,CAAC;QACpB,yBAAoB,GAAQ,EAAE,CAAC;QAG/B,gBAAW,GAAG;YACZ,OAAO;YACP,kBAAkB;SAEnB,CAAC;QACF,eAAU,GAAQ,OAAO,CAAC;IACoB,CAAC;IAE/C,QAAQ;IACR,CAAC;IAED,YAAY,CAAC,GAAG,EAAE,IAAI;QACpB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAC3D,CAAC,GAAG,EAAE,EAAE;YACN,IAAI,CAAC,cAAc,GAAG,OAAO,GAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACtE,CAAC,EACD,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAC1B,CAAC;IACJ,CAAC;IAED,yBAAyB;QACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,CAAC,GAAG,EAAC,EAAE;YAC7F,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC;IACH,CAAC;IAAA,CAAC;IAEF,YAAY,CAAC,KAAK;QAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC3C,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC3C;IACH,CAAC;IAAA,CAAC;IAEF,aAAa,CAAC,KAAK;QACjB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IAAA,CAAC;IAEF,sBAAsB,CAAC,KAAK;IAC5B,CAAC;IAAA,CAAC;;0FAxDS,qBAAqB;qGAArB,qBAAqB;QCRlC,yEAA8B;QAAA,0FAA+B;QAAA,4DAAM;QAC/D,yEACE;QAAA,2EAAuB;QAAA,gFAAqB;QAAA,4DAAQ;QACpD,qFAGE;QADA,uMAAwB;QACxB,2IAEmB;QACrB,4DAAkB;QACpB,4DAAM;QACN,gEACA;QAAA,gEACA;QAAA,gEACA;QAAA,0EAA8B;QAAA,2GAA+C;QAAA,4DAAM;QACnF,mFAGE;QAFA,4JAAU,wBAAoB,IAAC;QAE/B,sFAAoB;QAAA,wEAAY;QAAA,4DAAqB;QACrD,qJAEuB;QACzB,4DAAe;QACf,6EAAsG;QAAlC,8IAAS,2BAAuB,IAAC;QAAC,kEAAM;QAAA,4DAAS;QACrH,iEACA;QAAA,0EACE;QAAA,wDACF;QAAA,4DAAM;QACN,iEACA;QAAA,iEACA;QAAA,iEACA;QAAA,0EACE;QAAA,mJACF;QAAA,4DAAM;QACN,0EACE;QAAA,sEAAS;QAAA,iEACT;QAAA,4JACA;QAAA,iEACA;QAAA,iEACA;QAAA,gJACA;QAAA,iEACA;QAAA,wEACE;QAAA,sFACE;QAAA,iFAAoC;QAAA,oEAAQ;QAAA,4DAAY;QACxD,6EACF;QAD6G,kMAA4B;QAAvI,4DACF;QAAA,4DAAiB;QACnB,4DAAO;QACP,iEACA;QAAA,6EAA0G;QAAtC,8IAAS,+BAA2B,IAAC;QAAC,gFAAoB;QAAA,4DAAS;QACvI,0EAAwB;QAAA,wDAAwB;QAAA,4DAAM;QACxD,4DAAM;;QA7CF,0DAAwB;QAAxB,mFAAwB;QACwC,0DAAc;QAAd,oFAAc;QAWhF,0DAAmB;QAAnB,4EAAmB;QAEiB,0DAAS;QAAT,+EAAS;QAO7C,0DACF;QADE,gHACF;QAiBiH,2DAA4B;QAA5B,uFAA4B;QAKnH,0DAAwB;QAAxB,yFAAwB;;6FDzCzC,qBAAqB;cALjC,uDAAS;eAAC;gBACT,QAAQ,EAAE,mBAAmB;gBAC7B,WAAW,EAAE,gCAAgC;gBAC7C,SAAS,EAAE,CAAC,+BAA+B,CAAC;aAC7C;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyF;AAC9C;AAGD;;;;;;;AASnC,MAAM,UAAU;IACnB,MAAM;IACN,iBAAiB;IACjB,8CAA8C;IAC9C,qCAAqC;IACrC,MAAM;IACN,YACY,UAAsB,EACtB,MAAc,EACd,YAA0B,EAC1B,iBAAoC,EACpC,iBAAoC;QAJpC,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAc;QAC1B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAGhD,cAAS,GAAG,4BAA4B;IAFjC,CAAC;IAIR,SAAS;IACT,cAAc;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;aACpE,IAAI,CACD,0DAAG,CACC,CAAC,IAAa,EAAE,EAAE;YACd,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAY,EAAE,EAAE;YACjB,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACrC,CAAC,CACJ,CACJ;IACL,CAAC;IAED,cAAc,CAAC,OAAO;QAClB,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACvD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAW,EAAE,EAAE;YACZ,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAU,EAAE,EAAE;YACf,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CACL;IACT,CAAC;IAED,uBAAuB,CAAC,OAAO;QAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;QAChE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAY,EAAE,EAAE;YACb,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,CACJ;IACT,CAAC;IAED,SAAS,CAAC,OAAc,EAAE,sBAA8B,KAAK,EAAE,yBAAkC,KAAK;QAClG,IAAI,CAAC,UAAU,CAAC,IAAI,CACZ,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,MAAM;QAClD,EAAC,UAAU,EAAE,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,2BAA2B,EAAC,sBAAsB,EAAC;QACvH,2EAA2E;SAC9E,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;YACzB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,IAAS,EAAE,UAAiB;QACrC,MAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE9B,IAAI,UAAU,KAAK,OAAO,EAAE;YACxB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,eAAe,EAAE,QAAQ,EAAE;gBACpE,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,QAAQ;aAChB,CAAC,CAAC,IAAI,CACH,0DAAG,CAAC,CAAC,KAAK,EAAC,EAAE;gBACT,QAAO,KAAK,CAAC,IAAI,EAAE;oBACf,KAAK,kEAAa,CAAC,cAAc;wBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9D,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAC,CAAC;oBAEnD,KAAK,kEAAa,CAAC,QAAQ;wBACvB,OAAO,KAAK,CAAC,IAAI,CAAC;oBAEtB;wBACI,OAAO,gCAAgC,CAAC;iBAC/C;YACL,CAAC,CAAC,CACL,CAAC;SACT;aAAM;YACH,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,gCAAgC,EAAE,QAAQ,EAAE;gBACrF,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,QAAQ;aAChB,CAAC,CAAC,IAAI,CACH,0DAAG,CAAC,CAAC,KAAK,EAAC,EAAE;gBACT,QAAO,KAAK,CAAC,IAAI,EAAE;oBACf,KAAK,kEAAa,CAAC,cAAc;wBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;wBAC9D,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAC,CAAC;oBAEnD,KAAK,kEAAa,CAAC,QAAQ;wBACvB,OAAO,KAAK,CAAC,IAAI,CAAC;oBAEtB;wBACI,OAAO,gCAAgC,CAAC;iBAC/C;YACL,CAAC,CAAC,CACT,CAAC;SACL;IACL,CAAC;IAED,uBAAuB,CAAC,IAAW,EAAE,UAAiB;QAClD,IAAI,OAAO,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;QAC3B,IAAI,UAAU,KAAK,OAAO,EAAE;YACxB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,uBAAuB,EAAE,OAAO,CAAC,CAAC;SAClF;aAAM;YACH,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,wCAAwC,EAAE,OAAO,CAAC;SAClG;IACL,CAAC;IAED,eAAe,CAAC,OAAc;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,MAAM;QACpD,EAAC,IAAI,EAAE,OAAO,EAAC;QACf,2EAA2E;SAC9E;IACL,CAAC;IAED,eAAe,CAAC,OAAe,EAAE,OAAc;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE,MAAM;QACzD;YACI,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,uBAAuB,CAAC,OAAc,EAAE,YAAqB;QACzD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,EAAE,MAAM;QAClE;YACI,UAAU,EAAE,OAAO;YACnB,eAAe,EAAE,YAAY;SAChC,CACJ;IACL,CAAC;IAED,eAAe,CAAC,OAAc,EAAE,OAAc;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE,MAAM;QACzD;YACI,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,eAAe,CAAC,OAAc,EAAE,OAAc;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,EAAE,MAAM;QACzD;YACI,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,iBAAiB,CAAC,OAAc;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,MAAM;QACpD;YACI,IAAI,EAAE,OAAO;SAChB,CACJ;IACL,CAAC;IAED,iBAAiB,CAAC,OAAc;QAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,6BAA6B,CAAC,CAAC;QAC/D,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAW,EAAE,EAAE;YACZ,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,CACJ;IACT,CAAC;IAED,iBAAiB,CAAC,IAAI;QAClB,IAAI,OAAO,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,4BAA4B,EAAE,OAAO,CAAC,CAAC;IACxF,CAAC;IAED,yBAAyB;IACzB,mBAAmB;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;aACxE,IAAI,CACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAC,EAAE;YACL,OAAO,KAAK;QAChB,CAAC,CACA,EACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CACL;IACL,CAAC;IAED,mBAAmB,CAAC,YAAmB;QACnC,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QAC9D,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAgB,EAAE,EAAE;YACjB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAe,EAAE,EAAE;YACpB,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CACL;IACT,CAAC;IAED,qBAAqB;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;aAC3E,IAAI,CACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAC,EAAE;YACL,OAAO,KAAK;QAChB,CAAC,CACA,EACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CACL;IACL,CAAC;IAED,qBAAqB,CAAC,YAAmB;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QAC9D,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAgB,EAAE,EAAE;YACjB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAe,EAAE,EAAE;YACpB,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CACL;IACT,CAAC;IAED,qBAAqB,CAAC,IAAS;QAC/B,MAAM,QAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QAC1C,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAE9B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,wBAAwB,EAAE,QAAQ,EAAE;YAC7E,cAAc,EAAE,IAAI;YACpB,OAAO,EAAE,QAAQ;SAChB,CAAC,CAAC,IAAI,CACH,0DAAG,CAAC,CAAC,KAAK,EAAC,EAAE;YACT,QAAO,KAAK,CAAC,IAAI,EAAE;gBACf,KAAK,kEAAa,CAAC,cAAc;oBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC9D,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAC,CAAC;gBAEnD,KAAK,kEAAa,CAAC,QAAQ;oBACvB,OAAO,KAAK,CAAC,IAAI,CAAC;gBAEtB;oBACI,OAAO,gCAAgC,CAAC;aAC/C;QACL,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED,yBAAyB,CAAC,IAAW;QACjC,IAAI,OAAO,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,0BAA0B,EAAE,OAAO,CAAC,CAAC;IAC1F,CAAC;IAED,mBAAmB,CAAC,gBAAgB;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,iCAAiC,CAAC,EAAE,MAAM;QAChE,EAAC,mBAAmB,EAAE,gBAAgB,EAAC,CAC1C;IACL,CAAC;IAED,qBAAqB;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC;aAC3E,IAAI,CACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAC,EAAE;YACL,OAAO,KAAK;QAChB,CAAC,CACA,EACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CACL;IACL,CAAC;IAED,qBAAqB,CAAC,YAAmB;QACrC,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QAC9D,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAgB,EAAE,EAAE;YACjB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAe,EAAE,EAAE;YACpB,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC,CACL;IACT,CAAC;IAED,oBAAoB,CAAC,YAAmB;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,yBAAyB,CAAC,EAAE,MAAM;QACxD;YACI,IAAI,EAAE,YAAY;SACrB,CACJ;IACL,CAAC;IAED,oBAAoB,CAAC,YAAmB,EAAE,OAAe;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,wBAAwB,CAAC,EAAE,MAAM;QACvD;YACI,IAAI,EAAE,YAAY;YAClB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,sBAAsB,CAAC,YAAmB,EAAE,QAAiB;QACzD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,EACjD;YACI,eAAe,EAAE,YAAY;YAC7B,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,KAAK;SACnB,CACJ;IACL,CAAC;IAED,wBAAwB,CAAC,YAAmB,EAAE,OAAc,EAAE,QAAiB;QAC3E,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,6BAA6B,CAAC,EACpD;YACI,eAAe,EAAE,YAAY;YAC7B,SAAS,EAAE,OAAO;YAClB,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,KAAK;SACnB,CACJ;IACL,CAAC;IAED,cAAc;IACd,mBAAmB;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;aACzE,IAAI,CACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAC,EAAE;YACL,OAAO,KAAK;QAChB,CAAC,CACA,EACD,0DAAG,CAAC,CAAC,IAAiB,EAAC,EAAE;YACrB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED,mBAAmB,CAAC,YAAY;QAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAC5D,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAgB,EAAE,EAAE;YACjB,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,EACD,0DAAG,CAAC,CAAC,IAAe,EAAE,EAAE;YACpB,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CACL;IACT,CAAC;IAED,mBAAmB,CAAC,UAAqB;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CACjB,mCAAmC,CAAC,EAAE,MAAM;QAC5C,EAAC,YAAY,EAAE,UAAU,EAAC,CACjC;IACL,CAAC;IAED,kBAAkB,CAAC,YAAmB;QAClC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,6BAA6B,CAAC,EAAE,MAAM;QAC5D,EAAC,eAAe,EAAE,YAAY,EAAC,CAClC;IACL,CAAC;IAED,qBAAqB,CAAC,OAAc,EAAE,OAAc;QAChD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,uCAAuC,CAAC,EAAE,MAAM;QACtE;YACI,UAAU,EAAE,OAAO;YACnB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,0BAA0B,CAAC,YAAmB;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,+BAA+B,CAAC,EAAE,MAAM;QAC9D,EAAC,eAAe,EAAE,YAAY,EAAC,CAClC;IACL,CAAC;IAED,oBAAoB,CAAC,YAAmB,EAAE,OAAc;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,oCAAoC,CAAC,EAAE,MAAM;QACnE;YACI,IAAI,EAAE,YAAY;YAClB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,oBAAoB,CAAC,YAAmB,EAAE,OAAc;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,oCAAoC,CAAC,EAAE,MAAM;QACnE;YACI,IAAI,EAAE,YAAY;YAClB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,2BAA2B,CAAC,YAAmB,EAAE,cAAqB;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,2CAA2C,CAAC,EAAE,MAAM;QAC1E;YACI,IAAI,EAAE,YAAY;YAClB,iBAAiB,EAAE,cAAc;SACpC,CACJ;IACL,CAAC;IAED,2BAA2B,CAAC,OAAc,EAAE,WAAoB;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,4CAA4C,CAAC,EAAE,MAAM;QAC3E;YACI,UAAU,EAAE,OAAO;YACnB,eAAe,EAAE,WAAW;SAC/B,CACJ;IACL,CAAC;IAED,yBAAyB,CAAC,iBAAwB,EAAE,OAAc;QAC9D,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0CAA0C,CAAC,EAAE,MAAM;QACzE;YACI,IAAI,EAAE,iBAAiB;YACvB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,yBAAyB,CAAC,OAAc,EAAE,OAAc;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0CAA0C,CAAC,EAAE,MAAM;QACzE;YACI,IAAI,EAAE,OAAO;YACb,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,gCAAgC,CAAC,OAAc,EAAE,cAAqB;QAClE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,iDAAiD,CAAC,EAAE,MAAM;QAChF;YACI,IAAI,EAAE,OAAO;YACb,iBAAiB,EAAE,cAAc;SACpC,CACJ;IACL,CAAC;IAED,qBAAqB,CAAC,YAAmB,EAAE,OAAc;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gCAAgC,CAAC,EAAE,MAAM;QAC/D;YACI,eAAe,EAAE,YAAY;YAC7B,UAAU,EAAC,OAAO;SACrB,CACJ;IACL,CAAC;IAED,gBAAgB,CAAC,YAAmB;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,0BAA0B,CAAC,EACjD;YACI,eAAe,EAAE,YAAY;SAChC,CACJ;IACL,CAAC;IAED,8BAA8B,CAAC,OAAc,EAAE,OAAc;QACzD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gDAAgD,CAAC,EACvE;YACI,UAAU,EAAE,OAAO;YACnB,UAAU,EAAE,OAAO;SACtB,CACJ;IACL,CAAC;IAED,gBAAgB,CAAC,YAAmB,EAAE,aAAa;QAC/C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,+BAA+B,CAAC,EACtD;YACI,eAAe,EAAE,YAAY;YAC7B,gBAAgB,EAAE,aAAa;SAClC,CACJ;IACL,CAAC;IAED,sBAAsB,CAAC,YAAmB;QACtC,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,uCAAuC,CAAC,CAAC;QACzE,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACtB,GAAG,CACF,CAAC,IAAI,CACF,0DAAG,CACC,CAAC,IAAW,EAAE,EAAE;YACZ,OAAO,IAAI;QACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACN,OAAO,KAAK;QAChB,CAAC,CACJ,CACJ;IACT,CAAC;IAED,sBAAsB,CAAC,IAAI;QACvB,IAAI,OAAO,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,sCAAsC,EAAE,OAAO,CAAC,CAAC;IAClG,CAAC;;oEA/lBQ,UAAU;6FAAV,UAAU,WAAV,UAAU,mBADC,MAAM;6FACjB,UAAU;cADtB,wDAAU;eAAC,EAAC,UAAU,EAAC,MAAM,EAAC;;;;;;;;;;;;;;ACZ/B;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;;ACXpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2E;AACL;AAIqC;AAC1B;;;;;;;;;;;;;;;;ICE/D,iFACE;IAAA,uDACF;IAAA,4DAAa;;;IAF6C,+EAAmB;IAC3E,0DACF;IADE,yFACF;;;;IAiBd,oFACI;IAAA,2EACI;IAAA,qEACJ;IAAA,4DAAW;IACX,2FACI;IAAA,0EACI;IAAA,uDACJ;IAAA,4DAAM;IACN,0EACI;IAAA,6EAA0E;IAAnC,uWAAkC;IAAC,4DAAC;IAAA,4DAAS;IACxF,4DAAM;IACV,4DAAuB;IAC3B,4DAAgB;;;;;IAZD,wEAAe;IAEF,0DAA0B;IAA1B,yJAA0B;IAI1C,0DACJ;IADI,kHACJ;;ADpBL,MAAM,gBAAgB;IAW3B,kGAAkG;IAElG,YACU,KAAqB,EACrB,UAAsB,EACtB,MAAiB,EACjB,WAAwB;QAHxB,UAAK,GAAL,KAAK,CAAgB;QACrB,eAAU,GAAV,UAAU,CAAY;QACtB,WAAM,GAAN,MAAM,CAAW;QACjB,gBAAW,GAAX,WAAW,CAAa;QAflC,qBAAgB,GAAY,EAAE,CAAC;QAI/B,mBAAc,GAAY,EAAE,CAAC;QAC7B,8BAA8B;QAC9B,iBAAY,GAAG,IAAI,wEAAe,EAAE,CAAC;QACrC,YAAO,GAAW,CAAC,CAAC;IASd,CAAC;IAEP,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAS,EAAE,EAAE;YACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACxC,OAAO,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,yDAAU,CAAC,QAAQ,CAAC;gBACnD,SAAS,EAAE,IAAI,0DAAW,CAAC,CAAC,CAAC;aAC9B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC,oDAAoD;QAC3F,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,sDAAsD;QAC1F,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,mDAAmD;QACzF,IAAI,CAAC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC,gDAAgD;IAC9F,CAAC;IAED,UAAU;QACR,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAU,yCAAyC;QACnF,wHAAwB,EACxB,IAAI,CAAC,YAAY,CAClB,CAAC;QACF,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,WAAoB,EAAC,EAAE;YACxD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,IAAI,OAAO,WAAW,KAAK,OAAO,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE;gBACvC,KAAK,IAAI,OAAO,IAAI,WAAW,EAAE;oBAC/B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,KAAW,EAAC,EAAE;wBAC/D,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBACrC,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,IAAW,EAAC,EAAE;wBACxE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;aACxC;QACH,CAAC,CACA;IACH,CAAC;IAED,qBAAqB,CAAC,KAAY;QAChC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,SAAS;QACP,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACxB;QAAA,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,sBAAsB,CACpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,MAAM,CACP,CAAC,SAAS,EAAE;IACf,CAAC;IAED,WAAW;QACT,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACxB;QAAA,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,wBAAwB,CACtC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,EAC9B,MAAM,CACP,CAAC,SAAS,EAAE;IACf,CAAC;;gFA7FU,gBAAgB;gGAAhB,gBAAgB;QCb7B,sEACI;QAAA,yEAA8B;QAAA,oEAAS;QAAA,4DAAM;QAC7C,sEACI;QAAA,0EACI;QAAA,oFACI;QAAA,+EAA6B;QAAA,gEAAK;QAAA,4DAAY;QAC9C,gFACE;QAAA,0HAEa;QACf,4DAAa;QACjB,4DAAiB;QACjB,qFACI;QAAA,gFAA+B;QAAA,4EAAgB;QAAA,4DAAY;QAC3D,uEACJ;QAAA,4DAAiB;QACrB,4DAAO;QACX,4DAAM;QACV,4DAAM;QAGN,uEACI;QAAA,6EAAiE;QAAvB,yIAAS,gBAAY,IAAC;QAAC,sEAAU;QAAA,4DAAS;QACxF,4DAAM;QACN,iEACA;QAAA,qFACI;QAAA,mIAYgB;QACpB,4DAAgB;QAChB,iEACA;QAAA,6EAAgE;QAAtB,yIAAS,eAAW,IAAC;QAAC,mEAAO;QAAA,4DAAS;QAChF,8EAA4F;QAAxB,yIAAS,iBAAa,IAAC;QAAC,sEAAU;QAAA,4DAAS;;QAvCjG,0DAAyB;QAAzB,sFAAyB;QAI0B,0DAAS;QAAT,+EAAS;QAmBrB,2DAAqB;QAArB,yFAAqB;;6FDb7D,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;AEbD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["import { HttpEventType, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ComService } from '../shared/com.service';\n\n@Component({\n  selector: 'app-importer',\n  templateUrl: './importer.component.html',\n  styleUrls: ['./importer.component.css']\n})\nexport class ImporterComponent implements OnInit {\n  title = 'dropzone';\n  images: File[] = [];\n  deepflashModels: File[] = [];\n  message = \"\";\n  imageInputPath = \"\";\n  messageDeepflash:string=\"\";\n  meassageFilePathRead:string=\"\";\n  fileInfos: Observable<any>;\n  uploadResponse: string;//any = { status: '', message: ''};\n  error:string;\n  uploadModes = [\n    \"image\",\n    \"max-z-projection\",\n    \"tilescan\"\n  ];\n  uploadMode:string=\"image\";\n\n\n  constructor(\n    private comService: ComService\n    ) { }\n\n  ngOnInit() {\n  };\n\n\n  onSelectedFilesChanged(event) {\n  };\n\n// Deepflash\n  uploadDeepflashModels(idx, file) {\n    this.comService.uploadDeepflashModels(file).subscribe(\n      (res) => {\n        this.uploadResponse = \"File \"+ idx.toString() + JSON.stringify(res);\n      },\n      (err) => {this.error = err;}\n    )\n  }\n\n  onUploadDeepflashModelsClicked() {\n    console.log(this.deepflashModels);\n    this.message = \"\";\n  \n    for (let i = 0; i < this.deepflashModels.length; i++) {\n      this.uploadDeepflashModels(i, this.deepflashModels[i]);\n    }\n  };\n  \n  onDeepflashModelAdded(event) {\n      console.log(event);\n      this.deepflashModels.push(...event.addedFiles);\n      const formData = new FormData();\n      for (var i = 0; i < this.deepflashModels.length; i++) { \n        formData.append(\"file[]\", this.deepflashModels[i]);\n      }\n  };\n  \n  onRemoveDeepflashModel(event) {\n      console.log(event);\n      this.deepflashModels.splice(this.images.indexOf(event), 1);\n  };\n\n}","<mat-tab-group mat-align-tabs=\"start\">\n  <!-- Images -->\n  <mat-tab label=\"Images\">\n    <app-images-upload></app-images-upload>\n  </mat-tab>\n  <!-- Deepflash Models -->\n  <mat-tab label=\"Deepflash Models\">\n    <app-deepflash-models></app-deepflash-models>\n  </mat-tab>\n  <mat-tab label = \"Mistos Importer\">\n    <app-mistos-formats></app-mistos-formats>\n  </mat-tab>\n\n</mat-tab-group>\n","import { stringify } from '@angular/compiler/src/util';\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { MatTableFilter } from 'mat-table-filter';\nimport { Subscription } from 'rxjs';\nimport { ExperimentCreateNewDialogComponent } from 'src/app/dialogs/experiment-create-new-dialog/experiment-create-new-dialog.component';\nimport { Experiment } from 'src/app/models/experiment.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { ExperimentService } from 'src/app/shared/experiment.service';\n\n@Component({\n  selector: 'app-experiments-list',\n  templateUrl: './experiments-list.component.html',\n  styleUrls: ['./experiments-list.component.css']\n})\nexport class ExperimentsListComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  \n  filterEntity: Experiment;\n  filterType: MatTableFilter;\n  dataSource: MatTableDataSource<Experiment>;//ImagesListDataSource;\n  experimentList: Experiment[];\n  subscription: Subscription;\n\n\n  displayedColumns = ['uid', 'name', \"tags\", \"actions\"];\n\n  constructor(\n    private comService: ComService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public dialog: MatDialog,\n  ) { }\n\n  ngOnInit(): void {\n    // // Subscribe to imagelist\n    // this.subscription = this.experimentService.experimentListChanged.subscribe((experimentList:Experiment[]) => {\n    //   this.experimentList = experimentList;\n    // });\n    // this.experimentList = this.experimentService.getExperimentList();\n    this.route.data.subscribe((data:Data) => {\n      this.experimentList = data[\"experimentList\"];\n    });\n    // Components for filtering\n    this.filterEntity = new Experiment();\n    this.filterType = MatTableFilter.ANYWHERE;\n    //create dataSource for table\n    this.dataSource = new MatTableDataSource(this.experimentList);\n  }\n\n  onCreateNewExperiment() {\n    // Define Dialog Configuration\n    let dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      ExperimentCreateNewDialogComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newExperiment:Experiment)=> {\n      if (newExperiment instanceof Experiment) {\n        this.comService.createNewExperiment(newExperiment).subscribe((response) => {\n          this.comService.fetchExperimentList().subscribe(experimentList => {\n            this.experimentList = experimentList;\n            this.onFetchData();\n          });\n        });\n      } else {\n        console.log(\"aborted\");\n      }\n      \n    }\n  );  \n  }\n\n  onFetchData() {\n    this.dataSource = new MatTableDataSource(this.experimentList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngAfterViewInit() {\n    this.dataSource = new MatTableDataSource(this.experimentList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onSelect(experimentId: number) {\n    this.router.navigate([experimentId, \"hint\"], {relativeTo: this.route});\n  }\n\n  onDetail(uid) {\n    this.router.navigate([uid, \"detail\"], {relativeTo:this.route});\n  }\n\n}\n","<button mat-raised-button color=\"primary\" style=\"margin-bottom:10px\" (click)=\"onCreateNewExperiment()\">New Experiment</button>\n<div class=\"mat-elevation-z8 data-table\">\n    <!-- class=\"full-width-table\" -->\n    <mat-table matSort aria-label=\"Elements\" [dataSource]=\"dataSource\" \n    matTableFilter [exampleEntity]=\"filterEntity\" [filterType]=\"filterType\"\n    >\n        <!-- Id Column -->\n        <ng-container matColumnDef=\"uid\">\n        <mat-header-cell [ngClass]=\"'colId'\" *matHeaderCellDef mat-sort-header>\n            <mat-form-field appearance=\"outline\">\n            <input [ngClass]=\"'colId'\" matInput placeholder=\"ID\" [(ngModel)]=\"filterEntity.uid\">\n            </mat-form-field>\n        </mat-header-cell>\n        <mat-cell  *matCellDef=\"let row\">{{row.uid}}</mat-cell>\n        </ng-container>\n    \n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n        <mat-header-cell [ngClass]=\"'colName'\" mat-header-cell *matHeaderCellDef mat-sort-header>\n            <mat-form-field appearance=\"outline\">\n            <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\n            </mat-form-field>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">{{row.name}}</mat-cell>\n        </ng-container>\n    \n        <!-- Tags -->\n        <ng-container matColumnDef=\"tags\">\n        <mat-header-cell [ngClass]=\"'colTags'\" *matHeaderCellDef fxLayoutAlign=\"left\">\n            <mat-form-field appearance=\"outline\">\n            <input matInput placeholder=\"Tags\" [(ngModel)]=\"filterEntity.tags\">\n            </mat-form-field>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">{{row.tags.toString(\" \")}}</mat-cell>\n        </ng-container>\n    \n        <!-- Actions -->\n        <ng-container matColumnDef=\"actions\">\n        <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\" fxLayoutGap=\"5px\">\n            <button mat-raised-button color=\"basic\" (click)=\"onSelect(row.uid)\">Select</button>\n            <button mat-raised-button color=\"primary\" (click)=\"onDetail(row.uid)\">Detail</button>\n        </mat-cell>\n        </ng-container>\n        \n        <!-- Define displayed Column, maybe add dynamic selction in future -->\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row> \n        <!-- Create rows for displayed columns -->\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n    </mat-table>\n    <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n</div>\n\n\n\n\n                \n\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Image } from \"../models/image.model\";\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class ImageService {\r\n    imageListChanged = new Subject<Image[]>();\r\n    activeImage = new Subject<Image>();\r\n\r\n    private imageList: Image[] = [];\r\n\r\n    constructor() {}\r\n\r\n    changeActiveImage(image:Image) {\r\n        this.activeImage.next(image);\r\n    }\r\n\r\n    getImageList() {\r\n        return this.imageList.slice();\r\n    }\r\n\r\n    getImage(index:number) {\r\n        return this.imageList[index];\r\n    }\r\n\r\n    setImageList(imageList: Image[]){\r\n        this.imageList = imageList;\r\n        this.imageListChanged.next(this.imageList.slice());\r\n    }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-name',\n  templateUrl: './edit-name.component.html',\n  styleUrls: ['./edit-name.component.css']\n})\nexport class EditNameComponent implements OnInit {\n\n  form: FormGroup;\n  name: string;\n\n  constructor(\n    private dialogRef: MatDialogRef<EditNameComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.name = data.name;\n   }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      \"name\": new FormControl(this.name, Validators.required)\n    })\n    this.form.enable();\n  }\n\n  onSubmit() {\n    this.dialogRef.close(this.form.value.name);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n}\n","<h2 mat-dialog-title>Edit Name</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\">\n        <!-- Hint -->\n        <div class=\"mat-form-input\">\n            <mat-form-field>\n                <mat-label for=\"name\">Name</mat-label>\n                <input matInput id=\"name\" class=\"form-control\" formControlName=\"name\" #name>\n            </mat-form-field>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Save</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { CdkNoDataRow } from \"@angular/cdk/table\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Params, Resolve, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Observable, Subscription } from \"rxjs\";\r\n\r\nimport { Image } from \"../models/image.model\";\r\nimport { ComService } from \"../shared/com.service\";\r\nimport { ImageService } from \"../shared/image.service\";\r\n\r\n@Injectable()\r\nexport class ImageListResolver implements Resolve<Image[]> {\r\n    subscription:Subscription;\r\n    imageList:Image[];\r\n\r\n    constructor(\r\n        private imageService:ImageService,\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Image[]> | Promise<Image[]> | Image[] {\r\n        return this.comService.fetchImageList()\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class ImageResolver implements Resolve<Image> {\r\n    subscription:Subscription;\r\n    image:Image;\r\n    id:number;\r\n\r\n    constructor(\r\n        private imageService:ImageService,\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Image> | Promise<Image> | Image{\r\n        this.id = +route.params[\"id\"];\r\n        return this.comService.fetchImageById(this.id)\r\n        }\r\n}","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-hint',\n  templateUrl: './edit-hint.component.html',\n  styleUrls: ['./edit-hint.component.css']\n})\nexport class EditHintComponent implements OnInit {\n\n  form: FormGroup;\n  hint:string;\n\n  constructor(\n    private dialogRef: MatDialogRef<EditHintComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.hint = data.hint;\n   }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      \"hint\": new FormControl(this.hint, Validators.required)\n    })\n    this.form.enable();\n  }\n\n  onSubmit() {\n    this.dialogRef.close(this.form.value.hint);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n}\n","<h2 mat-dialog-title>Edit Hint</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\">\n        <!-- Hint -->\n        <div class=\"mat-form-input\">\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"hint\">Hint</mat-label>\n                <textarea matInput id=\"hint\" class=\"form-control\" formControlName=\"hint\" #hint \n                cdkTextareaAutosize\n                cdkAutosizeMinRows=\"1\"\n                cdkAutosizeMaxRows=\"10\"></textarea>\n            </mat-form-field>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Save</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-classifiers',\n  templateUrl: './classifiers.component.html',\n  styleUrls: ['./classifiers.component.css']\n})\nexport class ClassifiersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mat-headline\">Classifier</div>\r\n<mat-grid-list cols=\"3\" rowHeight=\"1:4\">\r\n    <mat-grid-tile [colspan]=\"'2'\">\r\n        <div class='internalMatGrid'>\r\n            <app-classifiers-list></app-classifiers-list>\r\n        </div>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile>\r\n        <div class='internalMatGrid'>\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </mat-grid-tile>\r\n</mat-grid-list>\r\n\r\n\r\n","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { MatTableFilter } from 'mat-table-filter';\nimport { Subscription } from 'rxjs';\nimport { WarningDeleteComponent } from 'src/app/dialogs/warning-delete/warning-delete.component';\nimport { Classifier } from 'src/app/models/classifier.model';\nimport { ClassifierService } from 'src/app/shared/classifier.service';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-classifiers-list',\n  templateUrl: './classifiers-list.component.html',\n  styleUrls: ['./classifiers-list.component.css']\n})\nexport class ClassifiersListComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  filterEntity: Classifier;\n  filterType: MatTableFilter;\n  dataSource: MatTableDataSource<Classifier>;//ImagesListDataSource;\n  classifierList: Classifier[];\n  subscription: Subscription;\n  displayedColumns = ['uid', 'name', \"clfType\", \"tags\", \"actions\"];\n  dialogConfig = new MatDialogConfig();\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private dialog: MatDialog,\n    private comService:ComService\n  ) { }\n\n  ngOnInit(): void {\n    this.route.data.subscribe((data:Data) => {\n      this.classifierList = data[\"classifierList\"];\n          //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n    });\n\n    // Components for filtering\n    this.filterEntity = new Classifier();\n    this.filterType = MatTableFilter.ANYWHERE;\n    //create dataSource for table\n    this.dataSource = new MatTableDataSource(this.classifierList);\n  }\n\n  ngAfterViewInit() {\n    // Here we define sorting, pagination and our datasource\n    this.dataSource = new MatTableDataSource(this.classifierList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onSelect(classifierId: number) {\n    this.router.navigate([classifierId, \"hint\"], {relativeTo: this.route});\n  }\n\n  onFetchData() {\n    this.dataSource = new MatTableDataSource(this.classifierList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onDelete(classifierId:number) {\n    this.dialogConfig.data = {\n      warningInput: \"this classifier\"\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      WarningDeleteComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((proceed:boolean)=> {\n      if (proceed === true) {\n        this.comService.deleteClassifierById(classifierId).subscribe((response) => {\n          console.log(\"DeleteClassifierRequest:\");\n          console.log(response);\n          \n          this.comService.fetchClassifierList().subscribe((imageList:Classifier[]) => {\n            this.classifierList = imageList;\n            this.onFetchData();\n          });\n      });\n      } else {\n        console.log(\"Delete Classifier was aboirted.\");\n      }\n    }\n    ) \n  }\n\n}\n","<div class=\"mat-elevation-z8 data-table\">\n    <mat-table matSort class=\"full-width-table\"  aria-label=\"Elements\" [dataSource]=\"dataSource\"\n    matTableFilter [exampleEntity]=\"filterEntity\" [filterType]=\"filterType\">\n        <!-- ID COLUMN -->\n        <ng-container matColumnDef=\"uid\">\n            <mat-header-cell [ngClass]=\"'colId'\" *matHeaderCellDef mat-sort-header>\n                <mat-form-field appearance=\"outline\">\n                  <input matInput placeholder=\"ID\" [(ngModel)]=\"filterEntity.uid\">\n                </mat-form-field>\n              </mat-header-cell>\n              <mat-cell *matCellDef=\"let row\">{{row.uid}}</mat-cell>\n        </ng-container>\n\n        <!-- NAME COLUMN -->\n        <ng-container matColumnDef=\"name\">\n            <mat-header-cell [ngClass]=\"'colName'\" mat-header-cell *matHeaderCellDef mat-sort-header>\n              <mat-form-field appearance=\"outline\">\n                <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\n              </mat-form-field>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n              <span class=\"tuncate-text\">{{row.name}}</span>\n            </mat-cell>\n        </ng-container>\n\n        <!-- CLASSIFIER TYPE COLUMN -->\n        <ng-container matColumnDef=\"clfType\">\n            <mat-header-cell mat-header-cell *matHeaderCellDef mat-sort-header>\n              <mat-form-field appearance=\"outline\">\n                <input matInput placeholder=\"Type\" [(ngModel)]=\"filterEntity.name\">\n              </mat-form-field>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">{{row.clfType}}</mat-cell>\n        </ng-container>\n\n        <!-- TAGS COLUMN -->\n        <ng-container matColumnDef=\"tags\">\n            <mat-header-cell [ngClass]=\"'colTags'\" *matHeaderCellDef>\n              <mat-form-field appearance=\"outline\">\n                <input matInput placeholder=\"Tags\" [(ngModel)]=\"filterEntity.tags\">\n              </mat-form-field>\n            </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">{{row.tags.toString(\" \")}}</mat-cell>\n        </ng-container>\n\n        <!-- ACTIONS COLUMN -->\n        <ng-container matColumnDef=\"actions\">\n            <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n            <mat-cell *matCellDef=\"let row\">\n              <button mat-raised-button color=\"basic\" style=\"margin-right:10px\" (click)=\"onSelect(row.uid)\">Select</button>\n              <button mat-raised-button color=\"warn\" (click)=\"onDelete(row.uid)\">Delete</button>\n            </mat-cell>\n        </ng-container>\n\n    <!-- Define displayed Column, maybe add dynamic selction in future -->\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row> \n    <!-- Create rows for displayed columns -->\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n\n    </mat-table>\n    <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { EditChannelsComponent } from 'src/app/dialogs/edit-channels/edit-channels.component';\nimport { EditHintComponent } from 'src/app/dialogs/edit-hint/edit-hint.component';\nimport { EditNameComponent } from 'src/app/dialogs/edit-name/edit-name.component';\nimport { ImageResultLayer } from 'src/app/models/image-result-layer.model';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { ImageService } from 'src/app/shared/image.service';\n\n@Component({\n  selector: 'app-image-detail',\n  templateUrl: './image-detail.component.html',\n  styleUrls: ['./image-detail.component.css']\n})\nexport class ImageDetailComponent implements OnInit {\n  image: Image;\n  metadata: {};\n  // Define Dialog Configuration\n  dialogConfig = new MatDialogConfig();\n  thumbnailPath:string;\n  \n\n  constructor(\n    private imageService: ImageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private comService: ComService,\n    private dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n    this.route.data.subscribe((data:Data) => {\n      this.image = data[\"image\"];\n    });\n    console.log(this.image);\n    this.metadata = this.image.metadata;\n\n    //fetch Thumbnail Path\n    this.comService.fetchImageThumbnailPath(this.image.uid).subscribe((path:string)=>{\n      this.thumbnailPath = path[\"path\"];\n    });\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n    this.dialogConfig.data = {\n      hint: this.image.hint,\n      channels: this.metadata[\"custom_channel_names\"]\n    };\n  }\n\n  filterMeasurements(layerId) {\n    return this.image.measurements.filter(m => m.resultLayerId === layerId);\n  }\n\n  onOpenInViewer() {\n    this.comService.viewImage(\n      this.image.uid,\n      true, true\n    )\n  }\n\n  onEditChannels() {\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditChannelsComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newChannels:[])=> {\n      if (typeof newChannels === typeof []) {\n        this.comService.updateImageChannelNames(this.image.uid, newChannels[\"channels\"]).subscribe(response=>{\n          this.comService.fetchImageById(this.image.uid).subscribe((image:Image)=>{\n            this.image = image;\n            this.metadata = this.image.metadata;\n          })\n        });\n      } else {\n        console.log(\"Edit Image Channel names was aborted.\");\n      }\n    }\n  );  \n  }\n\n  onEditHint() {\n    this.dialogConfig.data = {\n      hint: this.image.hint,\n      channels: this.metadata[\"custom_channel_names\"]\n    };\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditHintComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newHint:string)=> {\n      if (typeof newHint === typeof \"\") {\n        this.comService.updateImageHint(this.image.uid, newHint).subscribe(response => {\n          this.comService.fetchImageById(this.image.uid).subscribe((image:Image)=>{\n            this.image = image;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Image Hint was aborted.\");\n      }\n    }\n    )\n  }\n\n  onEditLayerName(layer:ImageResultLayer) {\n    this.dialogConfig.data = {\n      name: layer.name\n    };\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditNameComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newName:string)=> {\n      if (typeof newName === typeof \"\") {\n        this.comService.updateLayerName(layer.uid, newName).subscribe(response => {\n          this.comService.fetchImageById(this.image.uid).subscribe((image:Image)=>{\n            this.image = image;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onExportMistosImage(){\n    this.comService.exportMistosImage(this.image.uid).subscribe()\n  }\n\n  onDeleteLayer(layerId:number){\n    this.comService.deleteResultLayer(layerId).subscribe(response => {\n      this.comService.fetchImageById(this.image.uid).subscribe((image:Image)=>{\n        this.image = image;\n      });\n    });\n  }\n\n  onEditLayerHint(layer:ImageResultLayer) {\n    this.dialogConfig.data = {\n      hint: layer.hint\n    };\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditHintComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newHint:string)=> {\n      if (typeof newHint === typeof \"\") {\n        this.comService.updateLayerHint(layer.uid, newHint).subscribe(response => {\n          this.comService.fetchImageById(this.image.uid).subscribe((image:Image)=>{\n            this.image = image;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Hint was aborted.\");\n      }\n    }\n    )\n  }\n  \n\n}\n","<div fxLayout=\"row\">\n    <div class=\"mat-headline\">Image Detail: {{image.name}} [ID: {{image.uid}}]</div>\n    <!-- <button mat-raised-button color=\"primary\" (click)=\"onExportMistosImage()\" style=\"margin-left: 100px;margin-bottom:5 px\">Export to Export Folder</button> -->\n</div>\n\n\n<!-- Start Container -->\n<div class=\"grid-container\">\n    <mat-grid-list cols = \"4\" rowHeight=\"1:1\">\n        <!-- Image Preview Tile -->\n        <mat-grid-tile [colspan]=\"'2'\" [rowspan]=\"'2'\">\n            <mat-card>\n                <img mat-card-image [src] =\"thumbnailPath\"> \n            </mat-card>\n            <mat-grid-tile-header>\n                    Image Preview\n            </mat-grid-tile-header>\n            <mat-grid-tile-footer>\n                <button mat-raised-button color=\"primary\" (click)=\"onOpenInViewer()\">Open in Viewer</button>\n            </mat-grid-tile-footer>\n        </mat-grid-tile>\n        <!-- Metadata Tile -->\n        <mat-grid-tile [rowspan]=\"'2'\">\n            <mat-grid-tile-header>\n                Metadata \n            </mat-grid-tile-header>\n            <div class=\"top-align-forced left-align-forced mat-tile-space-under-header\">\n                <!-- Channel Information -->\n                <div class=\"mat-body-2\">\n                    Channels    \n                    <button mat-mini-fab color=\"primary\" aria-label=\"Edit channels\" (click)=\"onEditChannels()\">\n                        <mat-icon>menu</mat-icon>\n                    </button>        \n                </div>\n                <div class=\"mat-body-1\" *ngFor=\"let channel of metadata['custom_channel_names']\">\n                    {{metadata['custom_channel_names'].indexOf(channel)}}: {{channel}}\n                </div>\n                <hr>\n                <!-- Hint -->\n                <div class=\"mat-body-2\">\n                    Hint\n                    <button mat-mini-fab color=\"primary\" aria-label=\"Edit Hint\" (click)=\"onEditHint()\">\n                        <mat-icon>menu</mat-icon>\n                    </button>      \n                </div>\n                <div class=\"mat-body-1\">{{image.hint}}</div>\n            </div>          \n        </mat-grid-tile>\n        <!-- <mat-grid-tile [rowspan]=\"'2'\">\n            <mat-grid-tile-header>\n                Summary\n            </mat-grid-tile-header>\n            \n        </mat-grid-tile> -->\n\n    </mat-grid-list>\n</div>\n\n<!-- Layers and Measurements -->\n<br>\n<div class=\"mat-title\">Layers & Measurements</div>\n<div class=\"grid-container\">\n    <mat-grid-list cols=\"4\" rowHeight = \"1:1\">\n        <mat-grid-tile *ngFor=\"let layer of image.imageResultLayers; index as i\">\n            <mat-grid-tile-header fxLayout = \"row\">\n                {{layer.name}}\n                <button mat-raised-button color=\"primary\" style=\"margin-left:auto\" (click)=\"onEditLayerName(layer)\">Rename</button>\n                <button mat-raised-button color=\"warn\" style=\"margin-left:3px\" (click)=\"onDeleteLayer(layer.uid)\">Delete</button>\n            </mat-grid-tile-header>\n            <div class=\"top-align-forced left-align-forced mat-tile-space-under-header\">\n                <div class=\"mat-body-2\"  fxLayout=\"row\">\n                    Hint\n                    <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:15px\" (click)=\"onEditLayerHint(layer)\">Edit</button>\n                </div>\n                <div class=\"mat-body-1\">\n                    {{layer.hint}}\n                </div>\n                <hr>\n                <br>\n                <!-- <div class=\"mat-body-2\">Measurements</div> -->\n                <!-- <div class=\"measurement-info\" *ngFor=\"let measurement of filterMeasurements(layer.uid)\"></div> -->\n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-options',\n  templateUrl: './options.component.html',\n  styleUrls: ['./options.component.css']\n})\nexport class OptionsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>options works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-image-start',\n  templateUrl: './image-start.component.html',\n  styleUrls: ['./image-start.component.css']\n})\nexport class ImageStartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mat-title\" fxLayoutAlign=\"center\">Select an Image</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>home works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Experiment } from \"../models/experiment.model\";\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class ExperimentService {\r\n    experimentListChanged = new Subject<Experiment[]>();\r\n    activeExperiment = new Subject<Experiment>();\r\n\r\n    private experimentList: Experiment[] = [];\r\n\r\n    constructor() {}\r\n\r\n    changeActiveExperiment(experiment:Experiment) {\r\n        this.activeExperiment.next(experiment);\r\n    }\r\n\r\n    getExperimentList() {\r\n        return this.experimentList.slice();\r\n    }\r\n\r\n    getExperiment(index:number) {\r\n        return this.experimentList[index];\r\n    }\r\n\r\n    setExperimentList(experimentList: Experiment[]){\r\n        this.experimentList = experimentList;\r\n        this.experimentListChanged.next(this.experimentList.slice());\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-classifier-start',\n  templateUrl: './classifier-start.component.html',\n  styleUrls: ['./classifier-start.component.css']\n})\nexport class ClassifierStartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mat-title\" fxLayoutAlign=\"center\">Select a Classifer</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-deepflash',\n  templateUrl: './deepflash.component.html',\n  styleUrls: ['./deepflash.component.css']\n})\nexport class DeepflashComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  \n\n}\n","<div class=\"mat-headline\">\n    DeepFlash-2\n</div> \n<mat-tab-group mat-align-tabs=\"start\">\n    <mat-tab label=\"Predict\"><app-predict></app-predict></mat-tab>\n    <mat-tab label=\"Ground Truth Estimation\"><app-ground-truth-estimator></app-ground-truth-estimator></mat-tab>\n</mat-tab-group>","import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { MatTableFilter } from 'mat-table-filter';\nimport { Subscription } from 'rxjs';\nimport { WarningDeleteComponent } from 'src/app/dialogs/warning-delete/warning-delete.component';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { ImageService } from 'src/app/shared/image.service';\n\n@Component({\n  selector: 'app-images-list',\n  templateUrl: './images-list.component.html',\n  styleUrls: ['./images-list.component.css']\n})\nexport class ImagesListComponent implements AfterViewInit, OnInit {\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  filterEntity: Image;\n  filterType: MatTableFilter;\n  dataSource: MatTableDataSource<Image>;//ImagesListDataSource;\n  imageList: Image[];\n  subscription: Subscription;\n  displayedColumns = ['uid', 'name', \"tags\", \"actions\"];\n  dialogConfig = new MatDialogConfig();\n\n  constructor(\n    private comService: ComService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private dialog: MatDialog\n  ) {\n\n  }\n\n  ngOnInit() {\n    this.route.data.subscribe((data:Data) => {\n      this.imageList = data[\"imageList\"];\n    });\n    // Components for filtering\n    this.filterEntity = new Image();\n    this.filterType = MatTableFilter.ANYWHERE;\n    //create dataSource for table\n    this.dataSource = new MatTableDataSource(this.imageList);\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n  }\n\n  ngAfterViewInit() {\n    // Here we define sorting, pagination and our datasource\n    this.dataSource = new MatTableDataSource(this.imageList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  onFetchData() {\n    this.dataSource = new MatTableDataSource(this.imageList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  \n  onView(imageId) {\n    this.comService.viewImage(imageId, true, true);\n  }\n\n  onSelect(imageId: number) {\n    this.router.navigate([imageId, \"hint\"], {relativeTo: this.route});\n  }\n\n  onDelete(imageId: number) {\n    this.dialogConfig.data = {\n      warningInput: \"this image\"\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      WarningDeleteComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((proceed:boolean)=> {\n      if (proceed === true) {\n        this.comService.deleteImageById(imageId).subscribe((response) => {\n          console.log(\"DeleteImageRequest:\");\n          console.log(response);\n          \n          this.comService.fetchImageList().subscribe((imageList:Image[]) => {\n            this.imageList = imageList;\n            this.onFetchData();\n          });\n      });\n      } else {\n        console.log(\"Delete Image was aboirted.\");\n      }\n    }\n    ) \n  }\n}\n\n\n","<div class=\"mat-elevation-z8 data-table\">\n  <mat-table matSort aria-label=\"Elements\" [dataSource]=\"dataSource\"\n  matTableFilter [exampleEntity]=\"filterEntity\" [filterType]=\"filterType\">\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"uid\">\n      <mat-header-cell [ngClass]=\"'colId'\" *matHeaderCellDef mat-sort-header>\n        <mat-form-field appearance=\"outline\">\n          <input [ngClass]=\"'colId'\" matInput placeholder=\"ID\" [(ngModel)]=\"filterEntity.uid\">\n        </mat-form-field>\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{row.uid}}</mat-cell>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <mat-header-cell [ngClass]=\"'colName'\" mat-header-cell *matHeaderCellDef mat-sort-header>\n        <mat-form-field appearance=\"outline\">\n          <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\n        </mat-form-field>\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{row.name}}</mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"seriesIndex\">\n      <mat-header-cell *matHeaderCellDef>Image Series Index</mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{row.seriesIndex}}</mat-cell>\n    </ng-container>\n    \n    <!-- Has BG Layer -->\n    <ng-container matColumnDef=\"hasBgLayer\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header>\n        <mat-checkbox class=\"example-margin\" [(ngModel)]=\"filterEntity.hasBgLayer\">Has BG Layer</mat-checkbox>\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{row.hasBgLayer}}</mat-cell>\n    </ng-container>\n\n    <!-- Tags -->\n    <ng-container matColumnDef=\"tags\">\n      <mat-header-cell [ngClass]=\"'colTags'\" *matHeaderCellDef>\n        <mat-form-field appearance=\"outline\">\n          <input matInput placeholder=\"Tags\" [(ngModel)]=\"filterEntity.tags\">\n        </mat-form-field>\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{row.tags.toString(\" \")}}</mat-cell>\n    </ng-container>\n\n    <!-- Actions -->\n    <ng-container matColumnDef=\"actions\">\n      <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\n      <mat-cell *matCellDef=\"let row\" fxLayoutGap=\"5px\">\n        <button mat-raised-button color=\"primary\" (click)=\"onView(row.uid)\">View</button>\n        <button mat-raised-button color=\"basic\" (click)=\"onSelect(row.uid)\">Select</button>\n        <button mat-raised-button color=\"warn\" (click)=\"onDelete(row.uid)\">Delete</button>\n      </mat-cell>\n    </ng-container>\n    \n    <!-- Define displayed Column, maybe add dynamic selction in future -->\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row> \n    <!-- Create rows for displayed columns -->\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator [pageSizeOptions]=\"[10, 25, 50, 100]\" showFirstLastButtons></mat-paginator>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-experiment-start',\n  templateUrl: './experiment-start.component.html',\n  styleUrls: ['./experiment-start.component.css']\n})\nexport class ExperimentStartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mat-title\" fxLayoutAlign=\"center\">Select an Experiment</div>","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { Classifier } from \"../models/classifier.model\";\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class ClassifierService {\r\n    allClassifierListChanged = new Subject<Classifier[]>();\r\n    activeClassifier = new Subject<Classifier>();\r\n    rfClassifierListChanged = new Subject<Classifier[]>();\r\n    activeRfClassifier = new Subject<Classifier>();\r\n    dfClassifierListChanged = new Subject<Classifier[]>();\r\n    activeDfClassifier = new Subject<Classifier>();\r\n\r\n    private allClassifierList:Classifier[] = [];\r\n    private rfClassifierList: Classifier[] = [];\r\n    private dfClassifierList: Classifier[] = [];\r\n\r\n    constructor() {}\r\n    // All\r\n\r\n    changeActiveClassifier(classifier:Classifier) {\r\n        this.activeClassifier.next(classifier);\r\n    }\r\n\r\n    getClassifierList() {\r\n        return this.allClassifierList.slice();\r\n    }\r\n\r\n    getClassifier(index:number) {\r\n        return this.allClassifierList[index];\r\n    }\r\n\r\n    setClassifierList(classifierList: Classifier[]){\r\n        this.allClassifierList = classifierList;\r\n        this.allClassifierListChanged.next(this.allClassifierList.slice());\r\n    }\r\n\r\n    // Random Forest Segmentation\r\n    changeActiveRfClassifier(classifier:Classifier) {\r\n        this.activeRfClassifier.next(classifier);\r\n    }\r\n\r\n    getRfClassifierList() {\r\n        return this.rfClassifierList.slice();\r\n    }\r\n\r\n    getRfClassifier(index:number) {\r\n        return this.rfClassifierList[index];\r\n    }\r\n\r\n    setRfClassifierList(classifierList: Classifier[]){\r\n        this.rfClassifierList = classifierList;\r\n        this.rfClassifierListChanged.next(this.rfClassifierList.slice());\r\n    }\r\n\r\n    // DeepFlash\r\n    changeActiveDfClassifier(classifier:Classifier) {\r\n        this.activeDfClassifier.next(classifier);\r\n    }\r\n\r\n    getDfClassifierList() {\r\n        return this.dfClassifierList.slice();\r\n    }\r\n\r\n    setDfClassifierList(dfClassifierList:Classifier[]) {\r\n        this.dfClassifierList = dfClassifierList;\r\n        this.dfClassifierListChanged.next(this.dfClassifierList.slice());\r\n    }\r\n\r\n}\r\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-app-navbar',\n  templateUrl: './app-navbar.component.html',\n  styleUrls: ['./app-navbar.component.css']\n})\nexport class AppNavbarComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row>\n    <button mat-icon-button>\n      <mat-icon>menu</mat-icon>\n    </button>\n    <h1>Mistos</h1>\n    <span class=\"menu-spacer\"></span>\n    <div>\n      <a mat-button [routerLink]=\"'/dashboard'\"> Dashboard </a>\n      <a mat-button [routerLink]=\"'/experiments'\"> Experiments </a>\n      <a mat-button [routerLink]=\"'/images'\"> Images </a>\n      <a mat-button [routerLink]=\"'/deepflash'\"> Deepflash </a>\n      <a mat-button [routerLink]=\"'/classifiers'\"> Classifiers </a>\n      <a mat-button [routerLink]=\"'/import'\"> Import </a>\n      <!-- <a mat-button [routerLink]=\"'/features'\"> Features </a> -->\n\n    </div>\n  </mat-toolbar-row>\n</mat-toolbar>","export class Classifier{\r\n    uid: number;\r\n    name: string;\r\n    clfType: string;\r\n    params: {} = {};\r\n    metrics: {} = {};\r\n    tags: string[] = [];\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-classifier-detail',\n  templateUrl: './classifier-detail.component.html',\n  styleUrls: ['./classifier-detail.component.css']\n})\nexport class ClassifierDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>To be Done</p>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-warning-delete',\n  templateUrl: './warning-delete.component.html',\n  styleUrls: ['./warning-delete.component.css']\n})\nexport class WarningDeleteComponent implements OnInit {\n\n  warningInput: string;\n\n  constructor(\n    private dialogRef: MatDialogRef<WarningDeleteComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.warningInput = data.warningInput;\n   }\n\n  ngOnInit(): void {\n  }\n  onSubmit() {\n    this.dialogRef.close(true);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n\n}\n","<h2 mat-dialog-title>Warning</h2>\n\n<mat-dialog-content>\n    <div class=\"mat-body-1\">You are about to delete {{warningInput}}</div>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"warn\" (click)=\"onSubmit()\">Delete</button>\n    <button mat-raised-button color=\"\" (click)=\"onClose()\">Abort</button>\n</mat-dialog-actions>","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\nexport interface Tile {\n  cols: number;\n  rows: number;\n  text: string;\n  border: string;\n }\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  /** Based on the screen size, switch from standard to one column per row */\n  tiles: Tile[] = [\n    {text: 'Tile 1', cols: 2, rows: 1 ,border: '3px double purple'},\n    {text: 'Tile 2', cols: 2, rows: 1 ,border: '3px double red'},\n    {text: 'Tile 3', cols: 2, rows: 1 ,border: '3px double skyblue'},\n    {text: 'Tile 4', cols: 2, rows: 1 ,border: '3px double yellow'},\n    ];\n}\n","\n<div>\n  <div class=\"mat-headline\">Welcome to Mistos</div>\n  <div class=\"mat-body-1\">\n    This project is designed to help researchers to organize and evaluate microscopy images.\n    <br><br>\n    To get started, import your images and start organizing them in experiments.\n    <br><br>\n    If you have trouble using the tool it may be helpful to do the tutorial first (\"Mistos/tutorial/Mistos_Guide.docx\").\n    <br><br>\n    If you still have questions or issues, please report them <a href=\"https://github.com/Maddonix/mistos_2\">here</a>.\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ComService } from './shared/com.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'mistos-frontend';\n\n  constructor(private comService:ComService) {}\n\n  ngOnInit() {\n  }\n}\n","<app-app-navbar></app-app-navbar>\n<div class=\"grid-container\">\n    <router-outlet></router-outlet>\n</div>\n        \n","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Image } from 'src/app/models/image.model';\n\n@Component({\n  selector: 'app-add-image-to-group',\n  templateUrl: './add-image-to-group.component.html',\n  styleUrls: ['./add-image-to-group.component.css']\n})\nexport class AddImageToGroupComponent implements OnInit {\n\n  items: FormArray;\n  form: FormGroup;\n  imageList: Image[];\n  imageValueArray: {name: string, value: number}[] = [];\n\n  get imagesFormArray() {\n    return this.form.controls.images as FormArray;\n  }\n\n  constructor(\n    private dialogRef: MatDialogRef<AddImageToGroupComponent>,\n    private formBuilder: FormBuilder,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.imageList = data.imageList;\n   }\n\n  ngOnInit(): void {\n    // Create value array\n    for (let image of this.imageList){\n      let _imageValue = {\n        name:  image.uid.toString() + \": \" + image.name,\n        value: image.uid\n      };\n      this.imageValueArray.push(_imageValue);\n    }\n\n\n    // Define Form\n    this.form = this.formBuilder.group({\n      \"images\": this.formBuilder.array([])\n    });\n\n    this.addCheckboxes();\n    \n    this.form.enable();\n  }\n\n  addCheckboxes() {\n    this.imageValueArray.forEach(()=> this.imagesFormArray.push(new FormControl(false)))\n  }\n\n  onSubmit() {\n    const selectedImageIds = this.form.value.images\n      .map((checked, i) => checked ? this.imageValueArray[i].value : null)\n      .filter(v => v !== null);\n    this.dialogRef.close(selectedImageIds);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n}\n","<h2 mat-dialog-title>Add Images</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\">\n        <div *ngFor=\"let image of imagesFormArray.controls; let i = index\">\n            <label formArrayName=\"images\" >\n                <input type=\"checkbox\" [formControlName]=\"i\">\n                {{imageValueArray[i].name}}\n              </label>\n        </div>\n      </form>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Save</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { ExperimentGroup } from \"./experiment-group.model\"\r\n\r\nexport class Experiment {\r\n    uid: number;\r\n    name: string;\r\n    hint: string;\r\n    description: string;\r\n    tags: [];\r\n    experimentGroups: ExperimentGroup[];\r\n}","import { ImageResultLayer } from \"./image-result-layer.model\";\r\nimport { Measurement } from \"./measurement.model\";\r\n\r\nexport class Image{\r\n    uid: number;\r\n    seriesIndex: number;\r\n    name: string = \"\";\r\n    hasBgLayer: boolean;\r\n    bgLayerId: number; // might be null when image without bg layer is passed\r\n    metadata: {};\r\n    hint: string = \"\";\r\n    imageResultLayers: ImageResultLayer[] = [];\r\n    measurements: Measurement[] = [];\r\n    tags: string[] = [];\r\n}","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-channels',\n  templateUrl: './edit-channels.component.html',\n  styleUrls: ['./edit-channels.component.css']\n})\nexport class EditChannelsComponent implements OnInit {\n  form: FormGroup;\n  items: FormArray;\n  channels:string[];\n\n  constructor(\n    private dialogRef: MatDialogRef<EditChannelsComponent>,\n    private formBuilder: FormBuilder,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.channels = data.channels;\n   }\n\n  ngOnInit(): void {\n    // Init Item Array\n    this.items = new FormArray([]);\n    // Define Form\n    this.form = this.formBuilder.group({\n      \"channels\": this.formBuilder.array([])\n    });\n\n    for (let channel of this.channels) {\n      this.addChannel(channel);\n    };\n    this.form.enable();\n  }\n\n  createChannel(channel) {\n    return new FormControl(channel, Validators.required);\n  }\n  \n  addChannel(channel){\n    this.items = this.form.get('channels') as FormArray;\n    this.items.push(this.createChannel(channel));\n  }\n\n  getFormControl(index) {\n    return this.form.controls[index] as FormControl;\n  }\n\n  onSubmit() {\n    this.dialogRef.close(this.form.value);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n}\n","<h2 mat-dialog-title>Edit Channels</h2>\n\n<mat-dialog-content>\n        <form [formGroup]=\"form\">\n        <!-- Hint -->\n            <div class=\"mat-form-input\" *ngFor=\"let channelControl of form.get('channels')['controls']; index as i\">\n                <mat-form-field>\n                    <mat-label>Ch {{i}}</mat-label>\n                    <input matInput class=\"form-control\" [formControl]=\"channelControl\">\n                </mat-form-field>\n            </div>\n        </form>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Save</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { AddImageToGroupComponent } from 'src/app/dialogs/add-image-to-group/add-image-to-group.component';\nimport { EditDescriptionComponent } from 'src/app/dialogs/edit-description/edit-description.component';\nimport { EditHintComponent } from 'src/app/dialogs/edit-hint/edit-hint.component';\nimport { EditNameComponent } from 'src/app/dialogs/edit-name/edit-name.component';\nimport { ExportExperimentComponent } from 'src/app/dialogs/export-experiment/export-experiment.component';\nimport { WarningDeleteComponent } from 'src/app/dialogs/warning-delete/warning-delete.component';\nimport { ExperimentGroup } from 'src/app/models/experiment-group.model';\nimport { Experiment } from 'src/app/models/experiment.model';\nimport { ImageResultLayer } from 'src/app/models/image-result-layer.model';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-experiment-detail',\n  templateUrl: './experiment-detail.component.html',\n  styleUrls: ['./experiment-detail.component.css']\n})\nexport class ExperimentDetailComponent implements OnInit {\n  experiment: Experiment;\n  imageList: Image[];\n  metadata: {};\n  // Define Dialog Configuration\n  dialogConfig = new MatDialogConfig();\n  \n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private comService: ComService,\n    private dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n    this.route.data.subscribe((data:Data) => {\n      this.experiment = data[\"experiment\"];\n      this.imageList = data[\"imageList\"];\n    });\n    console.log(this.experiment);\n    console.log(this.imageList);\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n  }\n\n  onCalculateResults() {\n    this.comService.calculateExperimentResults(this.experiment.uid).subscribe(response => {\n      this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n        this.experiment=experiment;\n      });\n    });\n  }\n\n  onAddGroup() {\n    this.comService.newExperimentGroup(this.experiment.uid).subscribe(response => {\n      this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n        this.experiment=experiment;\n      });\n    });\n  };\n\n  onDeleteExperiment() {\n    this.dialogConfig.data = {\n      warningInput: \"this experiment\"\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      WarningDeleteComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((proceed:boolean)=> {\n      if (proceed === true) {\n        this.comService.deleteExperiment(this.experiment.uid).subscribe(response => {\n          this.router.navigate([\"../../\"], {relativeTo: this.route})\n        });\n      } else {\n        console.log(\"Delete experiment was aborted.\");\n      }\n    }\n    ) \n\n\n\n    \n  }\n\n  onDeleteGroup(groupId) {\n    this.comService.deleteExperimentGroup(this.experiment.uid, groupId).subscribe(response => {\n      this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n        this.experiment=experiment;\n      });\n    });\n  };\n\n  onEditName() {\n    this.dialogConfig.data = {\n      hint: this.experiment.hint,\n      description: this.experiment.description,\n      name: this.experiment.name\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditNameComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newName:string)=> {\n      console.log(newName);\n      if (typeof newName === typeof \"\") {\n        this.comService.updateExperimentName(this.experiment.uid, newName).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onEditHint() {\n    this.dialogConfig.data = {\n      hint: this.experiment.hint,\n      description: this.experiment.description\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditHintComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newHint:string)=> {\n      if (typeof newHint === typeof \"\") {\n        this.comService.updateExperimentHint(this.experiment.uid, newHint).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Experiment Hint was aborted.\");\n      }\n    }\n    )\n  }\n\n  onEditDescription() {\n    this.dialogConfig.data = {\n      hint: this.experiment.hint,\n      description: this.experiment.description\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditDescriptionComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newDescription:string)=> {\n      console.log(newDescription);\n      if (typeof newDescription === typeof \"\") {\n        this.comService.updateExperimentDescription(this.experiment.uid, newDescription).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onAddImage(group) {\n    this.dialogConfig.data = {\n      imageList: this.imageList\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      AddImageToGroupComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((imageIdList:number[])=> {\n      if (typeof imageIdList === typeof [2,3]) {\n        this.comService.updateExperimentGroupImages(group.uid, imageIdList).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n            console.log(this.experiment);\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Images was aborted.\");\n      }\n    }\n    )\n  }\n\n  onViewImage(image) {\n    this.comService.viewImage(image.uid, true, true);\n  }\n\n  onImageDetail(image) {\n    this.router.navigate([\"images\", image.uid.toString(), \"detail\"]);\n  }\n\n  sortById(list:Image[]) {\n    return list.sort((a,b)=>(a.uid > b.uid) ? 1:-1);\n  }\n\n  getActiveLayer(group: ExperimentGroup, image:Image) {\n    let activeLayer: ImageResultLayer;\n    let imageLayerIds = [];\n    for (let layer of image.imageResultLayers) {\n      imageLayerIds.push(layer.uid);\n    }\n    for (let layerId of group.resultLayerIds) {\n      let index = imageLayerIds.indexOf(layerId);\n      if (index > -1) {\n        activeLayer = image.imageResultLayers[index];\n      }\n    }\n    // Iterate over list of active Image Layers in this group\n    // if the result layers image id matches images' id, return\n    return activeLayer\n  }\n\n  getActiveLayerName(group:ExperimentGroup, image:Image) {\n    let layer = this.getActiveLayer(group, image);\n    if (typeof(layer) != \"undefined\"){\n      return layer.name;\n    }\n    else {\n      return \"None\";\n    }\n    \n  }\n\n  addResultLayerToGroup(groupId, layerId) {\n    // Currently only 1 Layer per image may be active, if a new one is set, the old one gets removed from the list in backend\n    this.comService.addResultLayertoGroup(groupId, layerId).subscribe(response => {\n      this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n        this.experiment=experiment;\n      });\n    });\n  }\n\n  onRemoveImageFromGroup(groupId, imageId) {\n    this.comService.deleteImageFromExperimentGroup(groupId, imageId).subscribe(response => {\n      this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n        this.experiment=experiment;\n      });\n    });\n  }\n\n  onEditGroupName(group) {\n    this.dialogConfig.data = {\n      hint: group.hint,\n      description: group.description,\n      name: group.name\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditNameComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newName:string)=> {\n      console.log(newName);\n      if (typeof newName === typeof \"\") {\n        this.comService.updateExperimentGroupName(group.uid, newName).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onEditGroupHint(group) {\n    this.dialogConfig.data = {\n      hint: group.hint,\n      description: group.description\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditHintComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newHint:string)=> {\n      if (typeof newHint === typeof \"\") {\n        this.comService.updateExperimentGroupHint(group.uid, newHint).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Hint was aborted.\");\n      }\n    }\n    )\n  }\n  \n  onEditGroupDescription(group){\n    this.dialogConfig.data = {\n      hint: group.hint,\n      description: group.description\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditDescriptionComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newDescription:string)=> {\n      console.log(newDescription);\n      if (typeof newDescription === typeof \"\") {\n        this.comService.updateExperimentGroupDescription(group.uid, newDescription).subscribe(response => {\n          this.comService.fetchExperimentById(this.experiment.uid).subscribe((experiment:Experiment)=>{\n            this.experiment = experiment;\n          });\n        }\n        );\n      } else {\n        console.log(\"Edit Experiment Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onExportExperiment() {\n    this.dialogConfig.data = {\n      experimentId: this.experiment.uid\n    };\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      ExportExperimentComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((exportRequest)=> {\n      console.log(exportRequest);\n      if (typeof exportRequest === typeof {}) {\n        this.comService.exportExperiment(this.experiment.uid, exportRequest).subscribe();\n      } else {\n        console.log(\"Edit Experiment Description was aborted.\");\n      }\n    }\n    )\n  }\n\n  onExportMistosExperiment() {\n    this.comService.exportMistosExperiment(this.experiment.uid).subscribe();\n  }\n\n}\n","<div class=\"mat-headline\" fxLayout=\"row\">Experiment Detail: {{experiment.name}} [ID: {{experiment.uid}}]\n    <!-- <button mat-raised-button color=\"primary\"style=\"margin-left: auto; margin-right: 20px\" (click)=\"onExportMistosExperiment()\">Export Mistos Experiment</button>  -->\n    <button mat-raised-button color=\"primary\"style=\"margin-right: 20px\" (click)=\"onEditName()\">Rename Experiment</button> \n    <button mat-raised-button color=\"warn\"style=\"margin-right: 20px\" (click)=\"onDeleteExperiment()\">Delete Experiment</button>\n</div>\n\n<div class=\"grid-container\">\n    <mat-grid-list cols = \"4\" rowHeight=\"1:1\">\n        <!-- Summary -->\n        <mat-grid-tile [colspan]=\"'2'\" [rowspan]=\"'2'\">\n            <mat-grid-tile-header>\n                    Experiment Summary\n            </mat-grid-tile-header>\n            <div class=\"top-align-forced left-align-forced mat-tile-space-under-header\">\n                <!-- Tags -->\n                <div class=\"mat-body-2\" fxLayout=\"row\">\n                    Tags\n                    <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\">Edit</button>     \n                </div>\n                <div class=\"mat-body-1\"></div>\n                <hr>\n                <!-- Hint -->\n                <div class=\"mat-body-2\" fxLayout=\"row\">\n                    Hint\n                    <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\" (click)=\"onEditHint()\">Edit</button>\n                </div>\n                <div class=\"mat-body-1\">\n                    {{experiment.hint}}\n                </div>\n                <hr>\n                <!-- Description -->\n                <div class=\"mat-body-2\" fxLayout=\"row\">\n                    Description\n                    <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\" (click)=\"onEditDescription()\">Edit</button>\n                </div>\n                <div class=\"mat-body-1\">\n                    {{experiment.description}}\n                </div>\n                <hr>\n            </div>\n            <!-- <mat-grid-tile-footer>\n                <button mat-raised-button color=\"primary\">Open in Viewer</button>\n            </mat-grid-tile-footer> -->\n        </mat-grid-tile>\n\n        <!-- Groups -->\n        <mat-grid-tile [colspan]=\"'2'\" [rowspan]=\"'2'\">\n            <mat-grid-tile-header>\n                    Group Summary <button mat-raised-button color=\"primary\" style=\"margin-left: 10px\" (click)=\"onAddGroup()\">Add Group</button>\n            </mat-grid-tile-header>\n            <div class=\"top-align-forced left-align-forced mat-tile-space-under-header\">\n                <div *ngFor=\"let group of experiment.experimentGroups\">\n                        <div class=\"mat-body-2\" fxLayout=\"row\">\n                            {{group.name}} [ID: {{group.uid}}]   \n                            <button mat-raised-button color=\"primary\"style=\"margin-left: auto; margin-right: 20px\" (click)=\"onEditGroupName(group)\">Rename</button>\n                            <button mat-raised-button color=\"warn\"style=\"margin-right: 20px\" (click)=\"onDeleteGroup(group.uid)\">Delete</button>\n                        </div>\n                        <div class=\"mat-body-1\"></div>\n                    <hr>\n                </div>                \n            </div>\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n<!-- Groups and Results -->\n<br>\n<div class=\"mat-title\" fxLayout=\"row\">\n    Groups & Results\n    <!-- <button mat-raised-button color=\"primary\" (click)=\"onCalculateResults()\" style=\"margin-left:auto; margin-right:20px\">Generate Result Report</button> -->\n    <button mat-raised-button color = \"primary\" style=\"margin-left: auto; margin-right:20px\" (click)=\"onExportExperiment()\">Export Results</button>\n</div>\n<div class=\"grid-container\">\n    <mat-grid-list cols=\"4\" rowHeight = \"1:4\">\n        <div *ngFor=\"let group of experiment.experimentGroups; index as i\">\n            <!-- Group Description, Hint, Images -->\n            <mat-grid-tile [colspan]=\"'2'\">\n                <mat-grid-tile-header fxLayout=\"row\">\n                    {{group.name}}\n                    <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\" (click)=\"onAddImage(group)\">Add Image</button>\n                </mat-grid-tile-header>\n                <div class=\"top-align-forced left-align-forced mat-tile-space-under-header\">\n                    <div class=\"mat-body-2\" fxLayout=\"row\">\n                        Hint\n                        <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\" (click)=\"onEditGroupHint(group)\">Edit</button>\n                    </div>\n                    <div class=\"mat-body-1\">{{group.hint}}</div>\n                    <hr>\n                    <br>\n                    <div class=\"mat-body-2\" fxLayout=\"row\">\n                        Description\n                        <button mat-raised-button color=\"primary\" style=\"margin-left:auto; margin-right:10px;\" (click)=\"onEditGroupDescription(group)\">Edit</button>\n                    </div>\n                    <div class=\"mat-body-1\">{{group.description}}</div>\n                    <hr>\n                    <br>\n                    <div *ngFor=\"let image of sortById(group.images)\">\n                        <div fxLayout = \"row\">\n                            <button mat-button [matMenuTriggerFor]=\"menu\">{{image.uid}}: {{image.name}}</button>\n                            <mat-menu #menu=\"matMenu\">\n                            <button mat-menu-item (click)=\"onImageDetail(image)\">Detail</button>\n                            <button mat-menu-item (click)=\"onRemoveImageFromGroup(group.uid, image.uid)\">Delete</button>\n                            </mat-menu>\n                            <button mat-stroked-button [matMenuTriggerFor]=\"layerSelect\"\n                            style=\"margin-left:auto; margin-bottom:3px\">{{getActiveLayerName(group, image)}}</button>\n                            <mat-menu #layerSelect=\"matMenu\">\n                                <button mat-menu-item *ngFor=\"let layer of image.imageResultLayers\" \n                                (click)=\"addResultLayerToGroup(group.uid, layer.uid)\"\n                                >{{layer.name}}</button>\n                            </mat-menu>\n                            <div *ngIf=\"image.hasBgLayer then thenBlock else elseBlock\"></div>\n                                <ng-template #thenBlock>\n                                    <button mat-stroked-button color=\"primary\" style=\"margin-left:3px; margin-bottom:3px\">BG</button>\n                                </ng-template>\n                                <ng-template #elseBlock>\n                                    <button mat-stroked-button color=\"warn\" style=\"margin-left:3px; margin-bottom:3px\">BG</button>\n                                </ng-template>\n                            <button mat-stroked-button color=\"primary\" style=\"margin-left:3px; margin-right:10px; margin-bottom:3px\" (click)=\"onViewImage(image)\">View</button>\n                        </div>\n                    </div>\n                </div>\n            </mat-grid-tile>\n            <!-- <mat-grid-tile>\n                <mat-grid-tile-header>\n                    {{group.name}} Results\n                </mat-grid-tile-header>\n            </mat-grid-tile> -->\n            <!-- Group Results -->\n        </div>\n    </mat-grid-list>\n</div>","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Observable, Subscription } from \"rxjs\";\r\nimport { Classifier } from \"../models/classifier.model\";\r\nimport { ClassifierService } from \"../shared/classifier.service\";\r\nimport { ComService } from \"../shared/com.service\";\r\n\r\n@Injectable()\r\nexport class ClassifierListResolver implements Resolve<Classifier[]> {\r\n    subscription:Subscription;\r\n    classifierList:Classifier[];\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier[]> | Promise<Classifier[]> | Classifier[] {\r\n        return this.comService.fetchClassifierList();\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class ClassifierResolver implements Resolve<Classifier> {\r\n    subscription:Subscription;\r\n    classifier:Classifier;\r\n    id: number;\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier> | Promise<Classifier> | Classifier{\r\n        this.id = route.params[\"id\"];    \r\n        return this.comService.fetchClassifierById(this.id);\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class RfClassifierListResolver implements Resolve<Classifier[]> {\r\n    subscription:Subscription;\r\n    classifierList:Classifier[];\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier[]> | Promise<Classifier[]> | Classifier[] {\r\n        return this.comService.fetchRfClassifierList()\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class RfClassifierResolver implements Resolve<Classifier> {\r\n    subscription:Subscription;\r\n    classifier:Classifier;\r\n    id: number;\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier> | Promise<Classifier> | Classifier{\r\n        // this.comService.fetchExperimentList();\r\n        this.id = route.params[\"id\"];    \r\n        return this.comService.fetchRfClassifierById(this.id);\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class DfClassifierListResolver implements Resolve<Classifier[]> {\r\n    subscription:Subscription;\r\n    classifierList:Classifier[];\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier[]> | Promise<Classifier[]> | Classifier[] {\r\n        return this.comService.fetchDfClassifierList()\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class DfClassifierResolver implements Resolve<Classifier> {\r\n    subscription:Subscription;\r\n    classifier:Classifier;\r\n    id: number;\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Classifier> | Promise<Classifier> | Classifier{\r\n        // this.comService.fetchExperimentList();\r\n        this.id = route.params[\"id\"];    \r\n        return this.comService.fetchDfClassifierById(this.id);\r\n        }\r\n}","import { BrowserModule } from '@angular/platform-browser';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { ImagesComponent } from './images/images.component';\nimport { ImagesListComponent } from './images/images-list/images-list.component';\nimport { ImageHintComponent } from './images/image-hint/image-hint.component';\nimport { ImageDetailComponent } from './images/image-detail/image-detail.component';\nimport { ExperimentsComponent } from './experiments/experiments.component';\nimport { ExperimentsListComponent } from './experiments/experiments-list/experiments-list.component';\nimport { ExperimentHintComponent } from './experiments/experiment-hint/experiment-hint.component';\nimport { ExperimentDetailComponent } from './experiments/experiment-detail/experiment-detail.component';\nimport { ImporterComponent } from './importer/importer.component';\nimport { ClassifiersComponent } from './classifiers/classifiers.component';\nimport { ClassifiersListComponent } from './classifiers/classifiers-list/classifiers-list.component';\nimport { ClassifierHintComponent } from './classifiers/classifier-hint/classifier-hint.component';\nimport { ClassifierDetailComponent } from './classifiers/classifier-detail/classifier-detail.component';\nimport { OptionsComponent } from './options/options.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from \"@angular/common/http\"\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule} from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { AppNavbarComponent } from './app-navbar/app-navbar.component';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatTableFilterModule } from 'mat-table-filter';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFileUploadModule } from 'mat-file-upload';\nimport { ExperimentStartComponent } from './experiments/experiment-start/experiment-start.component';\nimport { ImageStartComponent } from './images/image-start/image-start.component';\nimport { ClassifierStartComponent } from './classifiers/classifier-start/classifier-start.component';\nimport { ExperimentListResolver, ExperimentResolver } from './experiments/experiments.resolver';\nimport { RfClassifierListResolver, DfClassifierListResolver, RfClassifierResolver, DfClassifierResolver, ClassifierListResolver, ClassifierResolver } from './classifiers/classifier.resolver';\nimport { ImageListResolver, ImageResolver } from './images/images.resolver';\nimport { ExperimentCreateNewDialogComponent } from './dialogs/experiment-create-new-dialog/experiment-create-new-dialog.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { EditHintComponent } from './dialogs/edit-hint/edit-hint.component';\nimport { EditChannelsComponent } from './dialogs/edit-channels/edit-channels.component';\nimport { NgxDropzoneModule } from 'ngx-dropzone';\nimport { EditDescriptionComponent } from './dialogs/edit-description/edit-description.component';\nimport { EditNameComponent } from './dialogs/edit-name/edit-name.component';\nimport { AddImageToGroupComponent } from './dialogs/add-image-to-group/add-image-to-group.component';\nimport { ExportExperimentComponent } from './dialogs/export-experiment/export-experiment.component';\nimport { DeepflashComponent } from './deepflash/deepflash.component';\nimport { GroundTruthEstimatorComponent } from './deepflash/ground-truth-estimator/ground-truth-estimator.component';\nimport { PredictComponent } from './deepflash/predict/predict.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { WarningDeleteComponent } from './dialogs/warning-delete/warning-delete.component';\nimport { MistosFormatsComponent } from './importer/mistos-formats/mistos-formats.component';\nimport { DeepflashModelsComponent } from './importer/deepflash-models/deepflash-models.component';\nimport { ImagesUploadComponent } from './importer/images-upload/images-upload.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    DashboardComponent,\n    ImagesComponent,\n    ImagesListComponent,\n    ImageHintComponent,\n    ImageDetailComponent,\n    ExperimentsComponent,\n    ExperimentsListComponent,\n    ExperimentHintComponent,\n    ExperimentDetailComponent,\n    ImporterComponent,\n    ClassifiersComponent,\n    ClassifiersListComponent,\n    ClassifierHintComponent,\n    ClassifierDetailComponent,\n    OptionsComponent,\n    AppNavbarComponent,\n    ExperimentStartComponent,\n    ImageStartComponent,\n    ClassifierStartComponent,\n    ExperimentCreateNewDialogComponent,\n    EditHintComponent,\n    EditChannelsComponent,\n    EditDescriptionComponent,\n    EditNameComponent,\n    AddImageToGroupComponent,\n    ExportExperimentComponent,\n    DeepflashComponent,\n    GroundTruthEstimatorComponent,\n    PredictComponent,\n    WarningDeleteComponent,\n    MistosFormatsComponent,\n    DeepflashModelsComponent,\n    ImagesUploadComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatDialogModule,\n    FormsModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n    LayoutModule,\n    MatSidenavModule,\n    MatListModule,\n    MatGridListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableFilterModule,\n    MatCheckboxModule,\n    MatFileUploadModule,\n    NgxDropzoneModule,\n    MatTabsModule\n  ],\n  exports: [\n  ],\n  providers: [\n    ExperimentListResolver, ExperimentResolver,\n    ClassifierListResolver, ClassifierResolver,\n    RfClassifierListResolver, RfClassifierResolver,\n    DfClassifierListResolver, DfClassifierResolver,\n    ImageListResolver, ImageResolver\n  ],\n  schemas: [\n    CUSTOM_ELEMENTS_SCHEMA\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    AddImageToGroupComponent,\n    ExperimentCreateNewDialogComponent, \n    EditChannelsComponent, \n    EditHintComponent, \n    EditDescriptionComponent,\n    EditNameComponent,\n    ExportExperimentComponent,\n    WarningDeleteComponent\n  ]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-images',\n  templateUrl: './images.component.html',\n  styleUrls: ['./images.component.css']\n})\nexport class ImagesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"mat-headline\">Images</div>\n<mat-grid-list cols=\"3\" rowHeight=\"1:4\">\n    <mat-grid-tile [colspan]=\"'2'\">\n        <div class='internalMatGrid'>\n            <app-images-list></app-images-list>\n        </div>\n    </mat-grid-tile>\n    <mat-grid-tile>\n        <div class='internalMatGrid'>\n            <router-outlet></router-outlet>\n        </div>\n    </mat-grid-tile>\n</mat-grid-list>\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Experiment } from 'src/app/models/experiment.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { ExperimentService } from 'src/app/shared/experiment.service';\n\n@Component({\n  selector: 'app-experiment-hint',\n  templateUrl: './experiment-hint.component.html',\n  styleUrls: ['./experiment-hint.component.css']\n})\nexport class ExperimentHintComponent implements OnInit {\n  experiment: Experiment;\n  subscription: Subscription;\n\n  constructor(\n    private experimentService: ExperimentService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private comService: ComService,\n  ) { }\n\n  ngOnInit(): void {\n    // Subscribe to active experiment\n    // this.subscription = this.experimentService.activeExperiment.subscribe((experiment:Experiment) => {\n    //   this.experiment = experiment;\n    // });\n    this.route.data.subscribe((data:Data) => {\n      this.experiment = data[\"experiment\"];\n    });\n  }\n    \n  onPrint() {\n    console.log(this.experiment);\n  }\n\n}\n","<div class=\"mat-title\">{{experiment.name}} [ID: {{experiment.uid}}]</div>\n<div class=\"mat-body-1\">{{experiment.hint}}</div>\n<hr>\n<hr>\n<div class=\"mat-subheading-2\">Groups</div>\n<div *ngFor=\"let group of experiment.experimentGroups\">\n    <div class=\"mat-body-2\">{{group.name}} [ID: {{group.uid}}]</div>\n    <div class=\"mat-body-1\">Number of Images: {{group.images.length}}</div>\n    <div class=\"mat-body-2\">Hint</div>\n    <div class=\"mat-body-1\">{{group.hint}}</div>\n    <hr>\n</div>\n<div class=\"m-left\" fxLayoutAlign=\"center end\">\n<!-- placeholder for buttons -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-mistos-formats',\n  templateUrl: './mistos-formats.component.html',\n  styleUrls: ['./mistos-formats.component.css']\n})\nexport class MistosFormatsComponent implements OnInit {\n\n  meassageFilePathReadImage:string=\"\";\n  meassageFilePathReadExperiment:string=\"\";\n  imageInputPath:string=\"\";\n  experimentInputPath:string=\"\";\n\n  constructor(\n    private comService: ComService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onUploadImage() {\n    this.comService.importMistosImage(this.imageInputPath).subscribe();\n  }\n\n  onUploadExperiment() {\n    this.comService.importMistosExperiment(this.experimentInputPath).subscribe();\n  }\n\n}\n","<!-- Images -->\n<div class=\"mat-title\">\n    Import archived Mistos Images\n</div>\n<form>\n    <mat-form-field style=\"width:600px\">\n      <mat-label name = \"labelFilepathInput\" id=\"labelFilepathInput\">Filepath</mat-label>\n      <input matInput id=\"filepathInputImage\" name = \"filepathInputImage\" aria-labelledby=\"labelFilepathInput\" type=\"text\" [(ngModel)]=\"imageInputPath\" placeholder=\"C:\\example\\path\\to\\exp\\folder\">\n    </mat-form-field>\n</form>\n<br>\n<button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadImage()\">Import from filepath</button>\n<div class=\"mat-body-1\">{{meassageFilePathReadImage}}</div>\n<br>\n<hr><hr>\n<!-- Experiments -->\n<br>\n<div class=\"mat-title\">\n    Import archived Mistos Experiments\n</div>\n<form>\n    <mat-form-field style=\"width:600px\">\n      <mat-label name=\"labelFilepathInputExperiment\" for=\"labelFilepathInputExperiment\">Filepath</mat-label>\n      <input matInput id=\"filepathInputExperiment\" name = \"filepathInputExperiment\" aria-labelledby=\"labelFilepathInputExperiment\" type=\"text\" [(ngModel)]=\"experimentInputPath\" placeholder=\"C:\\example\\path\\to\\file.pkl\">\n    </mat-form-field>\n</form>\n<br>\n<button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadExperiment()\">Import from filepath</button>\n<div class=\"mat-body-1\">{{meassageFilePathReadExperiment}}</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { AddImageToGroupComponent } from 'src/app/dialogs/add-image-to-group/add-image-to-group.component';\nimport { ImageResultLayer } from 'src/app/models/image-result-layer.model';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-ground-truth-estimator',\n  templateUrl: './ground-truth-estimator.component.html',\n  styleUrls: ['./ground-truth-estimator.component.css']\n})\nexport class GroundTruthEstimatorComponent implements OnInit {\n  truthImageList: Image[] = [];\n  imageList: Image[] = [];\n  optionsForm: FormGroup;\n  layersForm: FormGroup;\n  dialogConfig = new MatDialogConfig();\n  numberExperts: number = 0;\n  rangeExperts = [];\n  layerChoices = {};\n  thumbnailPaths:string[]=[];\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private comService: ComService,\n    private dialog: MatDialog,\n    private formBuilder: FormBuilder\n    ) { }\n\n  ngOnInit(): void {\n    this.route.data.subscribe((data:Data) => {\n      this.imageList = data[\"imageList\"];\n      this.optionsForm = this.formBuilder.group({\n        \"model\": new FormControl(null, Validators.required)\n      });\n    });\n    this.layersForm = this.formBuilder.group({});\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n  }\n  \n\n  addControls(imageId, imageControls) {\n    for (let i of this.range(this.numberExperts)) {\n      let key = imageId.toString() + \"_\" + i.toString();\n      imageControls[key] = new FormControl(null, Validators.required);\n    }\n    return imageControls;\n  }\n\n  createChoices(image:Image){\n    let choices = [];\n    for (let layer of image.imageResultLayers) {\n      choices.push({\n        layerId: layer.uid, viewValue: layer.name\n      })\n    };\n    return choices\n  }\n\n  onCreateNewForm(){\n    this.rangeExperts = this.range(this.numberExperts);\n    let imageControls = {};\n    this.layerChoices = {};\n    for (let image of this.truthImageList) {\n      imageControls = this.addControls(image.uid, imageControls);\n      this.layerChoices[image.uid] = this.createChoices(image);\n    };\n    console.log(imageControls);\n    this.layersForm = new FormGroup(imageControls);\n    \n  }\n\n  onAddImage(){\n    this.dialogConfig.data = {\n      imageList: this.imageList\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      AddImageToGroupComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((imageIdList:number[])=> {\n      console.log(imageIdList);\n      if (typeof imageIdList === typeof [2,3]) {\n        for (let imageId of imageIdList) {\n          this.comService.fetchImageById(imageId).subscribe((image:Image)=> {\n            this.truthImageList.push(image);\n          });\n          this.comService.fetchImageThumbnailPath(imageId).subscribe((path:string)=>{\n            this.thumbnailPaths.push(path[\"path\"]);\n          });\n        }\n      } else {\n        console.log(\"Add Images was aborted.\");\n      }\n    }\n    )\n  }\n\n  onDeleteImageFromList(index:number) {\n    this.truthImageList.splice(index, 1);\n    this.thumbnailPaths.splice(index, 1);\n  }\n\n  onCalculateGroundTruth() {\n    // KEYS FOR RESULT ARE: \"{image_id}_{n_expert}\"\n    console.log(this.layersForm.value);\n    this.comService.estimateGroundTruth(this.layersForm.value).subscribe();\n  }\n\n  range(start, stop?, step?) {\n    if (typeof stop == 'undefined') {\n        // one param defined\n        stop = start;\n        start = 0;\n    }\n\n    if (typeof step == 'undefined') {\n        step = 1;\n    }\n\n    if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n        return [];\n    }\n\n    var result = [];\n    for (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n        result.push(i);\n    }\n\n    return result;\n};\n\n}\n","<div class=\"mat-body-1\">\n    <br>\n    Ground Truth estimation is based on SimpleIKT's STAPLE implementation. \n    <br><br>\n    1. Select a number of experts and add the images you want to evaluate.\n    <br>\n    2. Generate the form (always generate a new form if number of experts or selcted images were changed).\n    <br>\n    3. Select a layer for every expert for every image. \n    <br>\n    4. Calculate Ground Truth Estimation, new layers will be added to the images automatically.\n    <hr>\n</div>\n<div>\n    <!-- <form [formGroup]=\"optionsForm\"> -->\n        <mat-form-field appearance=\"fill\">\n            <mat-label for=\"numberExperts\">Number of Experts</mat-label>\n            <input matInput id=\"numberExperts\" type=\"number\" [(ngModel)]=\"numberExperts\">\n        </mat-form-field>\n    <!-- </form> -->\n    <div>\n        <button mat-raised-button color=\"primary\" (click)=\"onAddImage()\">Add Images</button>\n    </div>\n</div>\n<hr>\n<button mat-raised-button color=\"primary\" (click)=\"onCreateNewForm()\" style=\"margin-bottom: 5px\">Create New Form</button>\n<form [formGroup]=\"layersForm\">\n    <mat-grid-list cols=\"5\" rowHeight=\"1:1\" *ngFor=\"let image of truthImageList; let i = index;\">\n        <!-- Image Tile -->\n        <mat-grid-tile [colspan]=\"'1'\">\n            <mat-card>\n                <img mat-card-image [src] =\"thumbnailPaths[i]\"> \n            </mat-card>\n            <mat-grid-tile-header fxLayout=\"row\">\n                <div class=\"\">\n                    {{ image.name }} [ID: {{ image.uid }}]\n                </div>\n                <div style=\"margin-left: auto; margin-right:5px;\">\n                    <button mat-raised-button color=\"warn\" (click)=\"onDeleteImageFromList(i)\">X</button>\n                </div>\n            </mat-grid-tile-header>\n        </mat-grid-tile>\n        <!-- Expert Tiles -->\n        <mat-grid-tile [colspan]=\"'1'\" *ngFor=\"let expert of rangeExperts\">\n            <mat-grid-tile-header fxLayout=\"row\">\n                <div class=\"\">\n                    Expert {{ expert }}\n                </div>\n                <!-- <div style=\"margin-left: auto; margin-right:5px;\">\n                    <button mat-raised-button color=\"warn\" (click)=\"onDeleteImageFromList(i)\">X</button>\n                </div> -->\n            </mat-grid-tile-header>\n            <mat-form-field appearance=\"fill\">\n                <mat-label for=\"selectModel\">Layer</mat-label>\n                <mat-select class=\"form-control\" [formControlName]=\"image.uid.toString()+'_'+expert.toString()\">\n                  <mat-option id=\"selectModel\" *ngFor=\"let choice of layerChoices[image.uid]\" [value]=\"choice.layerId\">\n                    {{choice.viewValue}}\n                  </mat-option>\n                </mat-select>\n            </mat-form-field>\n        </mat-grid-tile>\n    </mat-grid-list>\n</form>\n<hr>\n<div class=\"mat-body-2\" style=\"color:red\">Warning: <br> Ground truth will be estimated and layers will be added to corresponding images. <br> This may take some time.</div>\n<button mat-raised-button color=\"primary\" (click)=\"onCalculateGroundTruth()\">Calculate Ground Truth</button>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { ImageService } from 'src/app/shared/image.service';\n\n@Component({\n  selector: 'app-image-hint',\n  templateUrl: './image-hint.component.html',\n  styleUrls: ['./image-hint.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ImageHintComponent implements OnInit {\n  image: Image;\n  subscription: Subscription;\n\n  constructor(\n    private imageService: ImageService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private comService: ComService\n  ) { }\n\n  ngOnInit() {\n    this.route.data.subscribe((data:Data) => {\n      this.image = data[\"image\"];\n    });\n  }\n\n  onDetail() {\n    this.router.navigate([\"..\", \"detail\"], {relativeTo:this.route});\n  }\n}\n","<div class = \"mat-title\">{{image.name}} [ID: {{image.uid}}]</div>\n<div class=\"mat-body-1\">{{image.hint}}</div>\n<hr><hr>\n<!-- Channels -->\n<div class=\"mat-body-2\">Channels</div> \n<div *ngFor=\"let c of image.metadata['custom_channel_names']\">\n    <div class=\"mat-body\">{{c}}</div>\n</div>\n<br>\n<!-- Dimensions -->\n<!-- X -->\n<div class=\"mat-body-2\">Dimensions</div> \n<div class=\"mat-body-1\">\n    X: {{image.metadata['pixel_size_x']}}px, {{image.metadata['pixel_size_physical_x']}}{{image.metadata['pixel_size_physical_unit_x']}}/px\n</div>\n<br>\n<!-- Y -->\n<div class=\"mat-body-1\">\n    Y: {{image.metadata['pixel_size_y']}}px, {{image.metadata['pixel_size_physical_y']}}{{image.metadata['pixel_size_physical_unit_y']}}/px\n</div>\n<br>\n<!-- Z -->\n<div class=\"mat-body-1\">\n    Z: {{image.metadata['pixel_size_z']}} silce, {{image.metadata['pixel_size_physical_z']}}{{image.metadata['pixel_size_physical_unit_z']}}/slice\n</div>\n<br>\n<!-- Layers -->\n<div class=\"mat-body-2\">Layers</div>\n<div class=\"mat-body-1\">Background Layer ID: {{image.bgLayerId}}</div>\n<div class=\"mat-body-1\">Result Layers: {{image.metadata[\"bgLayerId\"]}}</div>\n<div class=\"mat-body-1\" style=\"margin-left:40px\" *ngFor=\"let resultLayer of image.imageResultLayers\">{{resultLayer.name}} [{{resultLayer.layerType}}]</div>\n<br>\n<!-- Measurements -->\n<!-- <div class=\"mat-body-2\">Measurements</div>\n<div class=\"mat-body-1\" style=\"margin-left:40px\" *ngFor=\"let measurement of image.measurements\">{{measurement.name}} [ID: {{measurement.uid}}]</div> -->\n\n<div class=\"m-left\" fxLayoutAlign=\"center end\">\n    <button mat-raised-button color=\"primary\" style=\"margin-left:5px; margin-right:5px;\" (click)=\"onDetail()\">Detail</button>\n</div>\n\n\n","import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from \"@angular/router\";\r\nimport { Observable, Subscription } from \"rxjs\";\r\nimport { Experiment } from \"../models/experiment.model\";\r\nimport { ComService } from \"../shared/com.service\";\r\nimport { ExperimentService } from \"../shared/experiment.service\";\r\n\r\n@Injectable()\r\nexport class ExperimentListResolver implements Resolve<Experiment[]> {\r\n    subscription:Subscription;\r\n    experimentList:Experiment[];\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Experiment[]> | Promise<Experiment[]> | Experiment[] {\r\n        return this.comService.fetchExperimentList();\r\n        }\r\n}\r\n\r\n@Injectable()\r\nexport class ExperimentResolver implements Resolve<Experiment> {\r\n    subscription:Subscription;\r\n    experiment:Experiment;\r\n    id: number;\r\n\r\n    constructor(\r\n        private comService:ComService\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Experiment> | Promise<Experiment> | Experiment{\r\n        this.id = route.params[\"id\"];\r\n        return this.comService.fetchExperimentById(this.id);\r\n        }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { EditNameComponent } from 'src/app/dialogs/edit-name/edit-name.component';\nimport { Classifier } from 'src/app/models/classifier.model';\nimport { ClassifierService } from 'src/app/shared/classifier.service';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-classifier-hint',\n  templateUrl: './classifier-hint.component.html',\n  styleUrls: ['./classifier-hint.component.css']\n})\nexport class ClassifierHintComponent implements OnInit {\n  classifier: Classifier;\n  subscription: Subscription;\n  dialogConfig = new MatDialogConfig();\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private dialog: MatDialog,\n    private comService: ComService\n  ) { }\n\n  ngOnInit() {\n    this.route.data.subscribe((data:Data) => {\n      this.classifier = data[\"classifier\"];\n    });\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n  }\n\n  onRename() {\n    this.dialogConfig.data = {\n      name: this.classifier.name\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      EditNameComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((newName:string)=> {\n      console.log(newName);\n      if (typeof newName === typeof \"\") {\n        this.comService.updateClassifierName(this.classifier.uid, newName).subscribe();\n      } else {\n        console.log(\"Edit Name was aborted.\");\n      }\n    }\n    )\n  }\n}\n","<div class = \"mat-title\">{{classifier.name}} [ID: {{classifier.uid}}]</div>\n<!-- <div class=\"mat-body-1\">{{classifier.hint}}</div> -->\n<hr><hr>\n<div class=\"mat-body-2\">Classifier Type</div>\n<div class=\"mat-body-1\">{{classifier.clfType}}</div>\n<div class=\"mat-body-2\">Params</div>\n<div class=\"mat-body-1\">{{classifier.params | json}}</div>\n\n<div class=\"div\" fxLayoutAlign=\"center end\">\n    <button mat-raised-button color=\"primary\" style=\"margin-right: 5px\" (click)=\"onRename()\">Rename</button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { cpuUsage } from 'process';\nimport { Experiment } from '../models/experiment.model';\nimport { ComService } from '../shared/com.service';\nimport { ExperimentCreateNewDialogComponent } from '../dialogs/experiment-create-new-dialog/experiment-create-new-dialog.component';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-experiments',\n  templateUrl: './experiments.component.html',\n  styleUrls: ['./experiments.component.css']\n})\nexport class ExperimentsComponent implements OnInit {\n\n  constructor(\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  \n\n}\n","<div class=\"mat-headline\">Experiments</div>\r\n<mat-grid-list cols=\"3\" rowHeight=\"1:4\">\r\n    <mat-grid-tile [colspan]=\"'2'\">\r\n        <div class='internalMatGrid'>\r\n            <app-experiments-list></app-experiments-list>\r\n        </div>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile>\r\n        <div class='internalMatGrid'>\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </mat-grid-tile>\r\n</mat-grid-list>\r\n\r\n","import { Component, OnInit } from '@angular/core';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-deepflash-models',\n  templateUrl: './deepflash-models.component.html',\n  styleUrls: ['./deepflash-models.component.css']\n})\nexport class DeepflashModelsComponent implements OnInit {\n  title = 'dropzone';\n  deepflashModels: File[] = [];\n  modelInputPath = \"\";\n  messageDeepflash:string=\"\";\n  meassageFilePathRead:string=\"\";\n  uploadResponse: string;//any = { status: '', message: ''};\n  error:string;\n  uploadModes = [\n    \"image\",\n    \"max-z-projection\",\n    \"tilescan\"\n  ];\n  uploadMode:string=\"image\";\n  constructor(private comService: ComService) { }\n\n  ngOnInit(): void {\n  }\n\n  uploadDeepflashModels(idx, file) {\n    this.comService.uploadDeepflashModels(file).subscribe(\n      (res) => {\n        this.uploadResponse = \"File \"+ idx.toString() + JSON.stringify(res);\n      },\n      (err) => {this.error = err;}\n    )\n  }\n\n  onUploadDeepflashModelsClicked() {\n    console.log(this.deepflashModels);\n    this.messageDeepflash = \"\";\n  \n    for (let i = 0; i < this.deepflashModels.length; i++) {\n      this.uploadDeepflashModels(i, this.deepflashModels[i]);\n    }\n  };\n  \n  onDeepflashModelAdded(event) {\n      console.log(event);\n      this.deepflashModels.push(...event.addedFiles);\n      const formData = new FormData();\n      for (var i = 0; i < this.deepflashModels.length; i++) { \n        formData.append(\"file[]\", this.deepflashModels[i]);\n      }\n  };\n  \n  onRemoveDeepflashModel(event) {\n      console.log(event);\n      this.deepflashModels.splice(this.deepflashModels.indexOf(event), 1);\n  };\n\n  onUploadDeepflashModelFromFilepath() {\n    this.comService.uploadDfModelFromFilepath(this.modelInputPath).subscribe((res)=>{\n      this.meassageFilePathRead = JSON.stringify(res);\n    });\n  }\n\n}\n","<!-- <div class=\"mat-subheading-2\">Drag and drop custom Deepflash models:</div>\n<ngx-dropzone \n  (change)=\"onDeepflashModelAdded($event)\"\n  [expandable]=\"true\">\n  <ngx-dropzone-label>Drop Models!</ngx-dropzone-label>\n  <ngx-dropzone-preview *ngFor=\"let f of deepflashModels\" [removable]=\"true\" (removed)=\"onRemoveDeepflashModel(f)\">\n    <ngx-dropzone-label>{{ f.name }} ({{ f.type }})</ngx-dropzone-label>\n  </ngx-dropzone-preview>\n</ngx-dropzone>\n<button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadDeepflashModelsClicked()\">Upload</button> -->\n<hr>\n<div class=\"mat-subheading-2\">\n    For large models, please enter the full folderpath into the textfield and click upload.\n  </div>\n  <div class=\"mat-body-1\">\n    Example: <br>\n    F:\\Data_Storage\\AG_Rittner\\Microscope Framework\\data\\demo_experiment_deepflash\\model\n    <br>\n    <br>\n    This skips the webbroswer upload and considerably speeds up the importing process!\n    <br>\n    <form>\n      <mat-form-field style=\"width:600px\">\n        <mat-label for=\"labelFilepathInput\">Filepath</mat-label>\n        <input matInput id=\"filepathInput\" name = \"filepathInput\" aria-labelledby=\"labelFilepathInput\" type=\"text\" [(ngModel)]=\"modelInputPath\" placeholder=\"C:\\example\\path\\to\\model\">\n      </mat-form-field>\n    </form>\n    <br>\n    <button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadDeepflashModelFromFilepath()\">Import from filepath</button>\n<div class=\"mat-body-1\">{{meassageFilePathRead}}</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ClassifierDetailComponent } from './classifiers/classifier-detail/classifier-detail.component';\nimport { ClassifierHintComponent } from './classifiers/classifier-hint/classifier-hint.component';\nimport { ClassifierStartComponent } from './classifiers/classifier-start/classifier-start.component';\nimport { RfClassifierListResolver, RfClassifierResolver, DfClassifierListResolver, DfClassifierResolver, ClassifierListResolver, ClassifierResolver } from './classifiers/classifier.resolver';\nimport { ClassifiersComponent } from './classifiers/classifiers.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DeepflashComponent } from './deepflash/deepflash.component';\nimport { ExperimentDetailComponent } from './experiments/experiment-detail/experiment-detail.component';\nimport { ExperimentHintComponent } from './experiments/experiment-hint/experiment-hint.component';\nimport { ExperimentStartComponent } from './experiments/experiment-start/experiment-start.component';\nimport { ExperimentsComponent } from './experiments/experiments.component';\nimport { ExperimentListResolver, ExperimentResolver } from './experiments/experiments.resolver';\nimport { ImageDetailComponent } from './images/image-detail/image-detail.component';\nimport { ImageHintComponent } from './images/image-hint/image-hint.component';\nimport { ImageStartComponent } from './images/image-start/image-start.component';\nimport { ImagesComponent } from './images/images.component';\nimport { ImageListResolver, ImageResolver } from './images/images.resolver';\nimport { ImporterComponent } from './importer/importer.component';\nimport { OptionsComponent } from './options/options.component';\n\nconst routes: Routes = [\n  { path: \"\", redirectTo: \"/dashboard\", pathMatch: \"full\" },\n  { path: \"dashboard\", component: DashboardComponent },\n  { path: \"images\", component: ImagesComponent, resolve: {imageList: ImageListResolver}, children: [\n    { path: \"\", component: ImageStartComponent },\n    { path: \":id/hint\", component: ImageHintComponent, resolve: {image:ImageResolver} }\n  ] },\n  { path: \"images/:id/detail\", component: ImageDetailComponent, resolve: {image:ImageResolver} },\n  { path: \"experiments\", component: ExperimentsComponent, resolve: {experimentList: ExperimentListResolver}, children: [\n    { path: \"\", component: ExperimentStartComponent },\n    { path: \":id/hint\", component: ExperimentHintComponent, resolve: {experiment:ExperimentResolver} }\n  ]},\n  { path: \"experiments/:id/detail\", component: ExperimentDetailComponent, resolve: {experiment:ExperimentResolver, imageList: ImageListResolver} },\n  { path: \"classifiers\", component: ClassifiersComponent, resolve: {classifierList: ClassifierListResolver }, children: [\n    { path: \"\", component: ClassifierStartComponent },\n    { path: \":id/hint\", component: ClassifierHintComponent, resolve: {classifier:ClassifierResolver} }\n  ] },\n  { path: \"deepflash\", component: DeepflashComponent, resolve: {imageList: ImageListResolver, dfClassifierList: DfClassifierListResolver} },\n  { path: \"classifiers/:id/detail\", component: ClassifierDetailComponent, resolve: { classifier: ClassifierResolver } },\n  { path: \"import\", component: ImporterComponent },\n  { path: \"options\", component: OptionsComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Experiment } from 'src/app/models/experiment.model';\n\n@Component({\n  selector: 'app-experiment-create-new-dialog',\n  templateUrl: './experiment-create-new-dialog.component.html',\n  styleUrls: ['./experiment-create-new-dialog.component.css']\n})\nexport class ExperimentCreateNewDialogComponent implements OnInit {\n\n  form: FormGroup;\n\n  constructor(\n  private dialogRef: MatDialogRef<ExperimentCreateNewDialogComponent>\n    // @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {}\n\n\n    \n  ngOnInit(): void {\n    this.form = new FormGroup({\n      \"name\": new FormControl(\"\", Validators.required),\n      \"tags\": new FormControl(\"\"),\n      \"hint\": new FormControl(\"\"),\n      \"description\": new FormControl(\"\")\n    })\n    this.form.enable();\n  }\n\n  onSubmit() {\n    // let tags = this.form.value.tags.split(\";\")\n    let newExperiment = new Experiment()\n    newExperiment.uid = -1;\n    newExperiment.name = this.form.value.name;\n    newExperiment.hint = this.form.value.hint;\n    newExperiment.description = this.form.value.description;\n    newExperiment.experimentGroups = [];\n    newExperiment.tags = this.form.value.tags.split(\";\");\n    this.dialogRef.close(newExperiment);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n   \n}\n","<h2 mat-dialog-title>New Experiment</h2>\n\n<mat-dialog-content >\n    <form [formGroup]=\"form\">\n        <!-- name -->\n        <div class=\"mat-form-input\">\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"name\">Name</mat-label>\n                <input matInput type=\"text\" id=\"name\" class=\"form-control\" formControlName=\"name\" placeholder = \"Experiment Name\" #name>\n            </mat-form-field>\n        </div>\n        <!-- tags -->\n        <div class=\"mat-form-input\">\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"tags\">Tags</mat-label>\n                <input matInput type=\"text\" id=\"tags\" class=\"form-control\" formControlName=\"tags\" placeholder = \"Enter Tags separated by ';'\" #tags>\n            </mat-form-field>\n        </div>\n        <!-- Hint -->\n        <div class=\"mat-form-input\" >\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"hint\">Hint</mat-label>\n                <textarea matInput id=\"hint\" class=\"form-control\" formControlName=\"hint\" placeholder = \"Hint\" #hint\n                cdkTextareaAutosize\n                cdkAutosizeMinRows=\"1\"\n                cdkAutosizeMaxRows=\"10\"></textarea>\n            </mat-form-field>\n        </div>\n        <!-- Description -->\n        <div class=\"mat-form-input\" >\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"description\">Description</mat-label>\n                <textarea matInput id=\"description\" class=\"form-control\" formControlName=\"description\" placeholder = \"Description\" #description\n                cdkTextareaAutosize\n                cdkAutosizeMinRows=\"1\"\n                cdkAutosizeMaxRows=\"10\"></textarea>\n            </mat-form-field>\n        </div>\n\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Create Experiment</button>\n    \n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n\n</mat-dialog-actions>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-edit-description',\n  templateUrl: './edit-description.component.html',\n  styleUrls: ['./edit-description.component.css']\n})\nexport class EditDescriptionComponent implements OnInit {\n\n  form: FormGroup;\n  description: string;\n\n  constructor(\n    private dialogRef: MatDialogRef<EditDescriptionComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) {\n    this.description = data.description;\n   }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      \"description\": new FormControl(this.description, Validators.required)\n    })\n    this.form.enable();\n  }\n\n  onSubmit() {\n    this.dialogRef.close(this.form.value.description);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n}\n","<h2 mat-dialog-title>Edit Description</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\">\n        <!-- Hint -->\n        <div class=\"mat-form-input\">\n            <mat-form-field style=\"width:400px\">\n                <mat-label for=\"description\">Description</mat-label>\n                <textarea matInput id=\"description\" class=\"form-control\" formControlName=\"description\" placeholder = \"Enter description\" #description \n                cdkTextareaAutosize\n                cdkAutosizeMinRows=\"1\"\n                cdkAutosizeMaxRows=\"10\"\n                ></textarea>\n            </mat-form-field>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<!-- Actions -->\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Save</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-export-experiment',\n  templateUrl: './export-experiment.component.html',\n  styleUrls: ['./export-experiment.component.css']\n})\nexport class ExportExperimentComponent implements OnInit {\n  form: FormGroup;\n\n  constructor(\n    private formbuilder: FormBuilder,\n    private dialogRef: MatDialogRef<ExportExperimentComponent>\n    // @Inject(MAT_DIALOG_DATA) public data: any //like this we could inject data into our dialog\n  ) { }\n\n\n\n  ngOnInit(): void {\n    this.form = this.formbuilder.group({\n      images: false,\n      masks: false,\n      rois: false,\n      rescaled: false,\n      z_projection: false,\n      masks_binary: false,\n      masks_png: false,\n      images_single_channel: new FormControl(-1), //Add validator to make only integers from -1 (means no single channel export) to n_channels-1 available!\n      x_dim: new FormControl(1024),\n      y_dim: new FormControl(1024)\n    })\n    this.form.enable();\n  }\n\n  onSubmit() {\n    // let tags = this.form.value.tags.split(\";\")\n    this.dialogRef.close(this.form.value);\n  }\n\n  onClose() {\n    this.dialogRef.close(false);\n  }\n\n}\n","<h2 mat-dialog-title>Export Experiment</h2>\n\n<mat-dialog-content>\n    <form [formGroup]=\"form\">\n        <!-- name -->\n        <div>\n            <mat-checkbox formControlName=\"images\">Include Images?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"masks\">Include Masks?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"rescaled\">Include rescaled Images and Masks?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"z_projection\">Export as max-z-projection?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"rois\">Export Masks as Rois?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"masks_binary\">Export masks as binary labelled masks?</mat-checkbox>\n        </div>\n        <div>\n            <mat-checkbox formControlName=\"masks_png\">Export masks as .png files?</mat-checkbox>\n        </div>\n        <div>\n            <mat-form-field>\n                <mat-label for=\"images_single_channel\"\n                    matTooltip=\"-1 will export all channels, all other option just a single channel. For an image with 3 channels, valid options are -1,0,1,2\">\n                    Channel to export</mat-label>\n                <input matInput id=\"images_single_channel\" type=\"number\" formControlName=\"images_single_channel\">\n            </mat-form-field>\n        </div>\n        <div>\n            <mat-form-field>\n                <mat-label for=\"x_dim\">x-dimension</mat-label>\n                <input matInput id=\"x_dim\" type=\"number\" formControlName=\"x_dim\">\n            </mat-form-field>\n        </div>\n        <div>\n            <mat-form-field>\n                <mat-label for=\"y_dim\">y-dimension</mat-label>\n                <input matInput id=\"y_dim\" type=\"number\" formControlName=\"y_dim\">\n            </mat-form-field>\n        </div>\n    </form>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onSubmit()\">Export</button>\n    <button mat-raised-button color=\"danger\" (click)=\"onClose()\">Close</button>\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\nimport { ComService } from 'src/app/shared/com.service';\n\n@Component({\n  selector: 'app-images-upload',\n  templateUrl: './images-upload.component.html',\n  styleUrls: ['./images-upload.component.css']\n})\nexport class ImagesUploadComponent implements OnInit {\n  title = 'dropzone';\n  images: File[] = [];\n  message = \"\";\n  imageInputPath = \"\";\n  meassageFilePathRead:string=\"\";\n  uploadResponse: string;\n  error:string;\n  uploadModes = [\n    \"image\",\n    \"max-z-projection\",\n    // \"tilescan\"\n  ];\n  uploadMode:string=\"image\";\n  constructor(private comService: ComService) { }\n\n  ngOnInit(): void {\n  }\n\n  uploadImages(idx, file) { \n    this.comService.uploadImages(file, this.uploadMode).subscribe(\n      (res) => {\n        this.uploadResponse = \"File \"+ idx.toString() + JSON.stringify(res);\n      },\n      (err) => this.error = err\n    );      \n  }\n\n  onUploadImageFromFilepath() {\n    console.log(this.imageInputPath);\n    this.comService.uploadImageFromFilepath(this.imageInputPath, this.uploadMode).subscribe((res)=>{\n      this.meassageFilePathRead = JSON.stringify(res);\n    });\n  }\n\n  onUploadImagesClicked() {\n    this.message = \"\";\n\n    for (let i = 0; i < this.images.length; i++) {\n      this.uploadImages(i, this.images[i]);\n    }\n  };\n\n  onImageAdded(event) {\n    this.images.push(...event.addedFiles);\n    const formData = new FormData();\n    for (var i = 0; i < this.images.length; i++) { \n      formData.append(\"file[]\", this.images[i]);\n    }\n  };\n  \n  onRemoveImage(event) {\n    this.images.splice(this.images.indexOf(event), 1);\n  };\n  \n  onSelectedFilesChanged(event) {\n  };\n\n}\n","<div class=\"mat-subheading-2\">First, select your upload mode:</div>\n    <div style = \"margin-top:10px\">\n      <label id=\"modePicker\">Pick your upload Mode</label>\n      <mat-radio-group\n        aria-labelledby=\"modePicker\"\n        [(ngModel)]=\"uploadMode\">\n        <mat-radio-button class=\"example-radio-button\" *ngFor=\"let mode of uploadModes\" [value]=\"mode\" style=\"margin-left:20px\">\n          {{mode}}\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <br>\n    <hr>\n    <br>\n    <div class=\"mat-subheading-2\">For small images, just drag and drop them here:</div>\n    <ngx-dropzone \n      (change)=\"onImageAdded($event)\"\n      [expandable]=\"true\">\n      <ngx-dropzone-label>Drop Images!</ngx-dropzone-label>\n      <ngx-dropzone-preview *ngFor=\"let f of images\" [removable]=\"true\" (removed)=\"onRemoveImage(f)\">\n        <ngx-dropzone-label>{{ f.name }} ({{ f.type }})</ngx-dropzone-label>\n      </ngx-dropzone-preview>\n    </ngx-dropzone>\n    <button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadImagesClicked()\">Upload</button>\n    <br>\n    <div class=\"mat-body-1\" style=\"margin-top:5px\">\n      Upload Progress: {{uploadResponse}}%\n    </div>\n    <br>\n    <hr>\n    <br>\n    <div class=\"mat-subheading-2\">\n      For large images, please enter the full filepath into the textfield and click upload.\n    </div>\n    <div class=\"mat-body-1\">\n      Example: <br>\n      F:\\Data_Storage\\AG_Rittner\\Microscope Framework\\data\\demo_experiment_1\\3-NFh-CIRL1-1.oib\n      <br>\n      <br>\n      This skips the webbroswer upload and considerably speeds up the importing process!\n      <br>\n      <form>\n        <mat-form-field style=\"width:600px\">\n          <mat-label for=\"labelFilepathInput\">Filepath</mat-label>\n          <input matInput id=\"filepathInput\" name = \"filepathInput\" aria-labelledby=\"labelFilepathInput\" type=\"text\" [(ngModel)]=\"imageInputPath\" placeholder=\"C:\\example\\path\\to\\file.oib\">\n        </mat-form-field>\n      </form>\n      <br>\n      <button mat-raised-button style = \"margin-top:5px;\" color=\"primary\" (click)=\"onUploadImageFromFilepath()\">Import from filepath</button>\n      <div class=\"mat-body-1\">{{meassageFilePathRead}}</div>\n    </div>","import { HttpClient, HttpEvent, HttpEventType, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map, tap } from \"rxjs/operators\";\r\nimport { Classifier } from \"../models/classifier.model\";\r\nimport { Image } from \"../models/image.model\";\r\nimport { ExperimentService } from \"./experiment.service\";\r\nimport { ImageService } from \"./image.service\";\r\nimport { ClassifierService } from \"./classifier.service\";\r\nimport { Experiment } from \"../models/experiment.model\";\r\n\r\n@Injectable({providedIn:\"root\"})\r\nexport class ComService {\r\n    // /**\r\n    //  * Constructor\r\n    //  * @param httpClient Inject the http client\r\n    //  * @param router Inject the router\r\n    //  */\r\n    constructor(\r\n        private httpClient: HttpClient, \r\n        private router: Router,\r\n        private imageService: ImageService,\r\n        private experimentService: ExperimentService,\r\n        private classifierService: ClassifierService\r\n    ){​​​​ }​​​​\r\n\r\n    serverURL = \"http://localhost:7777/api/\"\r\n\r\n    // Images\r\n    fetchImageList() {\r\n        return this.httpClient.get(this.serverURL.concat(\"images/fetch_all\"))\r\n        .pipe(\r\n            map(\r\n                (data: Image[]) => {\r\n                    return data\r\n                },\r\n                (error) => {\r\n                    return error\r\n                }\r\n            ),\r\n            tap((data:Image[]) => {\r\n                this.imageService.setImageList(data);\r\n                }\r\n            )\r\n        )\r\n    }\r\n\r\n    fetchImageById(imageId) {\r\n        let url = this.serverURL.concat(\"images/fetch_by_id/\");\r\n        url = url.concat(imageId.toString());\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Image) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                ),\r\n                tap((data:Image) => {\r\n                    this.imageService.changeActiveImage(data);\r\n                })\r\n            )\r\n    }\r\n\r\n    fetchImageThumbnailPath(imageId) {\r\n        let url = this.serverURL.concat(\"images/fetch_thumbnail_path/\");\r\n        url = url.concat(imageId.toString());\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: string) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                )\r\n            )\r\n    }\r\n\r\n    viewImage(imageId:number, displayResultLayers:boolean = false, displayBackgroundLayer: boolean = false) {\r\n        this.httpClient.post(\r\n                this.serverURL.concat(\"images/view_by_id\"), // URL\r\n                {\"image_id\": imageId, \"display_result_layers\": displayResultLayers, \"display_background_layers\":displayBackgroundLayer}\r\n                // body, as third argument we could add options. This is not required here.\r\n            ).subscribe((response) => {\r\n            console.log(\"View Image Request:\");\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\n    uploadImages(file:File, uploadMode:string) {\r\n        const formData: FormData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        if (uploadMode === \"image\") {\r\n            return this.httpClient.post(`${this.serverURL}images/upload`, formData, {\r\n                reportProgress: true,\r\n                observe: 'events'\r\n                }).pipe(\r\n                    map((event)=>{\r\n                        switch(event.type) {\r\n                            case HttpEventType.UploadProgress:\r\n                                const progress = Math.round(100 * event.loaded / event.total);\r\n                                return {status: \"progress\", message: progress};\r\n                                \r\n                            case HttpEventType.Response:\r\n                                return event.body;\r\n                            \r\n                            default:\r\n                                return \"Unhandled event: ${event.type}\";\r\n                        }\r\n                    })\r\n                );\r\n        } else {\r\n            return this.httpClient.post(`${this.serverURL}images/upload_max_z_projection`, formData, {\r\n                reportProgress: true,\r\n                observe: 'events'\r\n                }).pipe(\r\n                    map((event)=>{\r\n                        switch(event.type) {\r\n                            case HttpEventType.UploadProgress:\r\n                                const progress = Math.round(100 * event.loaded / event.total);\r\n                                return {status: \"progress\", message: progress};\r\n                                \r\n                            case HttpEventType.Response:\r\n                                return event.body;\r\n                            \r\n                            default:\r\n                                return \"Unhandled event: ${event.type}\";\r\n                        }\r\n                    })\r\n            );\r\n        }\r\n    }\r\n\r\n    uploadImageFromFilepath(path:string, uploadMode:string) {\r\n        let payload = {path: path};\r\n        if (uploadMode === \"image\") {\r\n            return this.httpClient.post(`${this.serverURL}images/read_from_path`, payload);\r\n        } else {\r\n            return this.httpClient.post(`${this.serverURL}images/read_from_path_max_z_projection`, payload)\r\n        }\r\n    } \r\n\r\n    deleteImageById(imageId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/delete_by_id\"), // URL\r\n            {\"id\": imageId}\r\n            // body, as third argument we could add options. This is not required here.\r\n        )\r\n    }\r\n\r\n    updateImageHint(imageId: number, newHint:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/update_image_hint\"), // URL\r\n            {\r\n                \"id\": imageId,\r\n                \"new_hint\": newHint\r\n            }\r\n        )\r\n    }\r\n\r\n    updateImageChannelNames(imageId:number, channelNames:string[]) {\r\n        console.log(\"IMAGE ID\");\r\n        console.log(imageId)\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/update_image_channel_names\"), // URL\r\n            {\r\n                \"image_id\": imageId,\r\n                \"channel_names\": channelNames\r\n            }\r\n        )\r\n    }\r\n\r\n    updateLayerHint(layerId:number, newHint:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/update_layer_hint\"), // URL\r\n            {\r\n                \"id\": layerId,\r\n                \"new_hint\": newHint\r\n            }\r\n        )\r\n    }\r\n\r\n    updateLayerName(layerId:number, newName:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/update_layer_name\"), // URL\r\n            {\r\n                \"id\": layerId,\r\n                \"new_name\": newName\r\n            }\r\n        ) \r\n    }\r\n\r\n    deleteResultLayer(layerId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"images/delete_layer\"), // URL\r\n            {\r\n                \"id\": layerId\r\n            }\r\n        ) \r\n    }\r\n\r\n    exportMistosImage(imageId:number) {\r\n        let url = this.serverURL.concat(\"images/export_mistos_image/\");\r\n        url = url.concat(imageId.toString());\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Image) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                )\r\n            )\r\n    }\r\n\r\n    importMistosImage(path) {\r\n        let payload = {path: path};\r\n        return this.httpClient.post(`${this.serverURL}images/import_mistos_image`, payload);\r\n    }\r\n\r\n    // Classifier + Deepflash\r\n    fetchClassifierList() {\r\n        return this.httpClient.get(this.serverURL.concat(\"classifier/fetch_all\"))\r\n        .pipe(\r\n            map((data:Classifier[])=>{\r\n                return data\r\n            },\r\n            (error)=>{\r\n                return error\r\n            }\r\n            ),\r\n            tap((data:Classifier[])=>{\r\n                this.classifierService.setClassifierList(data);\r\n            })\r\n        )\r\n    }\r\n\r\n    fetchClassifierById(classifierId:number){\r\n        let url = this.serverURL.concat(\"classifier/fetch_rf_by_id/\");\r\n        url = url.concat(classifierId.toString());\r\n\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Classifier) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                ),\r\n                tap((data:Classifier) => {\r\n                    this.classifierService.changeActiveClassifier(data);\r\n                })\r\n            )\r\n    }\r\n\r\n    fetchRfClassifierList() {\r\n        return this.httpClient.get(this.serverURL.concat(\"classifier/fetch_all_rf\"))\r\n        .pipe(\r\n            map((data:Classifier[])=>{\r\n                return data\r\n            },\r\n            (error)=>{\r\n                return error\r\n            }\r\n            ),\r\n            tap((data:Classifier[])=>{\r\n                this.classifierService.setRfClassifierList(data);\r\n            })\r\n        )\r\n    }\r\n\r\n    fetchRfClassifierById(classifierId:number){\r\n        let url = this.serverURL.concat(\"classifier/fetch_rf_by_id/\");\r\n        url = url.concat(classifierId.toString());\r\n\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Classifier) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                ),\r\n                tap((data:Classifier) => {\r\n                    this.classifierService.changeActiveRfClassifier(data);\r\n                })\r\n            )\r\n    }\r\n\r\n    uploadDeepflashModels(file:File) {\r\n    const formData: FormData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    return this.httpClient.post(`${this.serverURL}deepflash/upload_model`, formData, {\r\n        reportProgress: true,\r\n        observe: 'events'\r\n        }).pipe(\r\n            map((event)=>{\r\n                switch(event.type) {\r\n                    case HttpEventType.UploadProgress:\r\n                        const progress = Math.round(100 * event.loaded / event.total);\r\n                        return {status: \"progress\", message: progress};\r\n                        \r\n                    case HttpEventType.Response:\r\n                        return event.body;\r\n                    \r\n                    default:\r\n                        return \"Unhandled event: ${event.type}\";\r\n                }\r\n            })\r\n        );\r\n    } \r\n\r\n    uploadDfModelFromFilepath(path:string) {\r\n        let payload = {path: path}; \r\n            return this.httpClient.post(`${this.serverURL}deepflash/read_from_path`, payload);\r\n    } \r\n\r\n    estimateGroundTruth(imagesLabelsDict) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"deepflash/estimate_ground_truth\"), // URL\r\n            {\"images_label_dict\": imagesLabelsDict}\r\n        )\r\n    }\r\n\r\n    fetchDfClassifierList(){\r\n        return this.httpClient.get(this.serverURL.concat(\"classifier/fetch_all_df\"))\r\n        .pipe(\r\n            map((data:Classifier[])=>{\r\n                return data\r\n            },\r\n            (error)=>{\r\n                return error\r\n            }\r\n            ),\r\n            tap((data:Classifier[])=>{\r\n                this.classifierService.setDfClassifierList(data);\r\n            })\r\n        )\r\n    }\r\n\r\n    fetchDfClassifierById(classifierId:number){\r\n        let url = this.serverURL.concat(\"classifier/fetch_df_by_id/\");\r\n        url = url.concat(classifierId.toString());\r\n\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Classifier) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                ),\r\n                tap((data:Classifier) => {\r\n                    this.classifierService.changeActiveDfClassifier(data);\r\n                })\r\n            )\r\n    }\r\n\r\n    deleteClassifierById(classifierId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"classifier/delete_by_id\"), // URL\r\n            {\r\n                \"id\": classifierId\r\n            }\r\n        )\r\n    }\r\n\r\n    updateClassifierName(classifierId:number, newName: string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"classifier/update_name\"), // URL\r\n            {\r\n                \"id\": classifierId,\r\n                \"new_name\": newName\r\n            }\r\n        ) \r\n    }\r\n\r\n    deepflashPredictImages(classifierId:number, imageIds:number[]) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"deepflash/predict_images\"),\r\n            {\r\n                \"classifier_id\": classifierId,\r\n                \"channel\": 0,\r\n                \"image_ids\": imageIds,\r\n                \"use_tta\": false\r\n            }\r\n        )\r\n    }\r\n\r\n    deepflashPredictImages3D(classifierId:number, channel:number, imageIds:number[]) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"deepflash/predict_images_3d\"),\r\n            {\r\n                \"classifier_id\": classifierId,\r\n                \"channel\": channel,\r\n                \"image_ids\": imageIds,\r\n                \"use_tta\": false\r\n            }\r\n        )\r\n    }\r\n\r\n    // Experiments\r\n    fetchExperimentList() {\r\n        return this.httpClient.get(this.serverURL.concat(\"experiments/fetch_all\"))\r\n        .pipe(\r\n            map((data:Experiment[])=>{\r\n                return data\r\n            },\r\n            (error)=>{\r\n                return error\r\n            }\r\n            ),\r\n            tap((data:Experiment[])=>{\r\n                this.experimentService.setExperimentList(data);\r\n            })\r\n        );\r\n    }\r\n\r\n    fetchExperimentById(experimentId) {\r\n        let url = this.serverURL.concat(\"experiments/fetch_by_id/\");\r\n        url = url.concat(experimentId.toString());\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Experiment) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                ),\r\n                tap((data:Experiment) => {\r\n                    this.experimentService.changeActiveExperiment(data);\r\n                })\r\n            )\r\n    }\r\n\r\n    createNewExperiment(experiment:Experiment) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\r\n                \"experiments/create_new_experiment\"), // URL\r\n                {\"experiment\": experiment}\r\n        )\r\n    }\r\n\r\n    newExperimentGroup(experimentId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/new_group_by_id\"), // URL\r\n            {\"experiment_id\": experimentId}\r\n        )\r\n    }\r\n\r\n    addResultLayertoGroup(groupId:number, layerId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/add_result_layer_to_group\"), // URL\r\n            {\r\n                \"group_id\": groupId,\r\n                \"layer_id\": layerId\r\n            }\r\n        ) \r\n    }\r\n\r\n    calculateExperimentResults(experimentId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/calculate_results\"), // URL\r\n            {\"experiment_id\": experimentId}\r\n        )\r\n    }\r\n\r\n    updateExperimentName(experimentId:number, newName:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_name\"), // URL\r\n            {\r\n                \"id\": experimentId,\r\n                \"new_name\": newName\r\n            }\r\n        ) \r\n    }\r\n\r\n    updateExperimentHint(experimentId:number, newHint:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_hint\"), // URL\r\n            {\r\n                \"id\": experimentId,\r\n                \"new_hint\": newHint\r\n            }\r\n        )\r\n    }\r\n\r\n    updateExperimentDescription(experimentId:number, newDescription:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_description\"), // URL\r\n            {\r\n                \"id\": experimentId,\r\n                \"new_description\": newDescription\r\n            }\r\n        )\r\n    }\r\n\r\n    updateExperimentGroupImages(groupId:number, imageIdList:number[]) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_group_images\"), // URL\r\n            {\r\n                \"group_id\": groupId,\r\n                \"image_id_list\": imageIdList\r\n            }\r\n        )\r\n    }\r\n\r\n    updateExperimentGroupName(experimentGroupId:number, newName:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_group_name\"), // URL\r\n            {\r\n                \"id\": experimentGroupId,\r\n                \"new_name\": newName\r\n            }\r\n        ) \r\n    }\r\n\r\n    updateExperimentGroupHint(groupId:number, newHint:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_group_hint\"), // URL\r\n            {\r\n                \"id\": groupId,\r\n                \"new_hint\": newHint\r\n            }\r\n        )\r\n    }\r\n\r\n    updateExperimentGroupDescription(groupId:number, newDescription:string) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/update_experiment_group_description\"), // URL\r\n            {\r\n                \"id\": groupId,\r\n                \"new_description\": newDescription\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteExperimentGroup(experimentId:number, groupId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/delete_group_by_id\"), // URL\r\n            {\r\n                \"experiment_id\": experimentId, \r\n                \"group_id\":groupId\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteExperiment(experimentId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/delete_by_id\"), \r\n            {\r\n                \"experiment_id\": experimentId\r\n            }\r\n        )\r\n    }\r\n    \r\n    deleteImageFromExperimentGroup(groupId:number, imageId:number) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/delete_image_from_experiment_group\"), \r\n            {\r\n                \"group_id\": groupId,\r\n                \"image_id\": imageId\r\n            }\r\n        )\r\n    }\r\n\r\n    exportExperiment(experimentId:number, exportRequest) {\r\n        return this.httpClient.post(\r\n            this.serverURL.concat(\"experiments/export_experiment\"), \r\n            {\r\n                \"experiment_id\": experimentId,\r\n                \"export_request\": exportRequest\r\n            }\r\n        )\r\n    }\r\n\r\n    exportMistosExperiment(experimentId:number) {\r\n        let url = this.serverURL.concat(\"experiments/export_mistos_experiment/\");\r\n        url = url.concat(experimentId.toString());\r\n        return this.httpClient.get(\r\n            url\r\n            ).pipe(\r\n                map(\r\n                    (data: Image) => {\r\n                        return data\r\n                    },\r\n                    (error) => {\r\n                        return error\r\n                    }\r\n                )\r\n            )\r\n    }\r\n\r\n    importMistosExperiment(path) {\r\n        let payload = {path: path};\r\n        return this.httpClient.post(`${this.serverURL}experiments/import_mistos_experiment`, payload);\r\n    }\r\n\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Component, OnInit, ɵAPP_ID_RANDOM_PROVIDER } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ActivatedRoute, Data, Router } from '@angular/router';\nimport { Image } from 'src/app/models/image.model';\nimport { ComService } from 'src/app/shared/com.service';\nimport { AddImageToGroupComponent } from 'src/app/dialogs/add-image-to-group/add-image-to-group.component';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Classifier } from 'src/app/models/classifier.model';\n\n@Component({\n  selector: 'app-predict',\n  templateUrl: './predict.component.html',\n  styleUrls: ['./predict.component.css']\n})\nexport class PredictComponent implements OnInit {\n  imageList: Image[];\n  predictImageList: Image[] = [];\n  metadata: {};\n  models: Classifier[];\n  optionsForm: FormGroup;\n  thumbnailPaths:string[] = [];\n  // Define Dialog Configuration\n  dialogConfig = new MatDialogConfig();\n  channel: number = 0;\n\n  /////////////////////////// TO DO: GET MODELS FROM BACKEND ///////////////////////////////////////\n\n  constructor(\n    private route: ActivatedRoute,\n    private comService: ComService,\n    private dialog: MatDialog,\n    private formBuilder: FormBuilder\n    ) { }\n\n  ngOnInit(): void {\n    this.route.data.subscribe((data:Data) => {\n      this.imageList = data[\"imageList\"];\n      this.models = data[\"dfClassifierList\"];\n      this.optionsForm = this.formBuilder.group({\n        \"model\": new FormControl(null, Validators.required),\n        \"channel\": new FormControl(0)\n      });\n    });\n\n    //Setup Dialog Config File\n    this.dialogConfig.disableClose = true; //disables closing by clicking outside of the dialog\n    this.dialogConfig.autoFocus = true; //focus will automatically set on the first form field\n    this.dialogConfig.hasBackdrop = true; //prevents user from clicking on the rest of the ui\n    this.dialogConfig.closeOnNavigation = true; //closes dialog if wen navigate to another route\n  }\n\n  onAddImage(){\n    this.dialogConfig.data = {\n      imageList: this.imageList\n    };\n\n    const dialogRef = this.dialog.open(         //dialogRef is a observable of the dialog\n      AddImageToGroupComponent,\n      this.dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((imageIdList:number[])=> {\n      console.log(imageIdList);\n      if (typeof imageIdList === typeof [2,3]) {\n        for (let imageId of imageIdList) {\n          this.comService.fetchImageById(imageId).subscribe((image:Image)=> {\n            this.predictImageList.push(image);\n            console.log(this.predictImageList);\n          });\n          this.comService.fetchImageThumbnailPath(imageId).subscribe((path:string)=>{\n            this.thumbnailPaths.push(path[\"path\"]);\n          });\n        }\n      } else {\n        console.log(\"Add Images was aborted.\");\n      }\n    }\n    )\n  }\n\n  onDeleteImageFromList(index:number) {\n    this.predictImageList.splice(index, 1);\n    this.thumbnailPaths.splice(index,1);\n  }\n\n  onPredict() {\n    let idList = [];\n    for (let image of this.predictImageList) {\n      idList.push(image.uid);\n    };\n    this.comService.deepflashPredictImages(\n      this.optionsForm.value.model,\n      idList,\n    ).subscribe()\n  }\n\n  onPredict3D() {\n    console.log(this.optionsForm.value.model);\n    console.log(this.predictImageList);\n    let idList = [];\n    for (let image of this.predictImageList) {\n      idList.push(image.uid);\n    };\n    this.comService.deepflashPredictImages3D(\n      this.optionsForm.value.model,\n      this.optionsForm.value.channel,\n      idList,\n    ).subscribe()\n  }\n\n}\n","<!-- Settings -->\n<div>\n    <div class=\"mat-subheading-2\">Settings:</div>\n    <div>\n        <form [formGroup]=\"optionsForm\">\n            <mat-form-field appearance=\"fill\">\n                <mat-label for=\"selectModel\">Model</mat-label>\n                <mat-select class=\"form-control\" formControlName=\"model\">\n                  <mat-option id=\"selectModel\" *ngFor=\"let model of models\" [value]=\"model.uid\">\n                    {{model.name}}\n                  </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"fill\" style=\"margin-left: 10px\">\n                <mat-label for=\"selectChannel\">Channel (0 to n)</mat-label>\n                <input matInput id=\"channel\" type=\"number\" formControlName=\"channel\">\n            </mat-form-field>\n        </form>\n    </div>\n</div>\n\n<!-- Image Selection -->\n<div>\n    <button mat-raised-button color=\"primary\" (click)=\"onAddImage()\">Add Images</button>\n</div>\n<hr>\n<mat-grid-list cols=\"5\" rowHeight=\"1:1\">\n    <mat-grid-tile [colspan]=\"'1'\" *ngFor=\"let image of predictImageList; let i = index;\">\n        <mat-card>\n            <img mat-card-image [src] =\"thumbnailPaths[i]\"> \n        </mat-card>\n        <mat-grid-tile-header fxLayout=\"row\">\n            <div class=\"\">\n                {{ image.name }} [ID: {{ image.uid }}]\n            </div>\n            <div style=\"margin-left: auto; margin-right:5px;\">\n                <button mat-raised-button color=\"warn\" (click)=\"onDeleteImageFromList(i)\">X</button>\n            </div>\n        </mat-grid-tile-header>\n    </mat-grid-tile>\n</mat-grid-list>\n<hr>\n<button mat-raised-button color=\"primary\" (click)=\"onPredict()\">Predict</button>\n<button mat-raised-button style = \"margin-left:5px\" color=\"primary\" (click)=\"onPredict3D()\">Predict 3D</button>\n\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}